// Code generated by goa v3.6.2, DO NOT EDIT.
//
// GuildService HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-guilds-service/api/design -o ../

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	guildservice "github.com/InjectiveLabs/injective-guilds-service/api/gen/guild_service"
	goahttp "goa.design/goa/v3/http"
)

// BuildGetAllGuildsRequest instantiates a HTTP request object with method and
// path set to call the "GuildService" service "GetAllGuilds" endpoint
func (c *Client) BuildGetAllGuildsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetAllGuildsGuildServicePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("GuildService", "GetAllGuilds", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetAllGuildsResponse returns a decoder for responses returned by the
// GuildService GetAllGuilds endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetAllGuildsResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): 5
//	- "internal" (type *goa.ServiceError): 13
//	- error: internal error
func DecodeGetAllGuildsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetAllGuildsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildService", "GetAllGuilds", err)
			}
			err = ValidateGetAllGuildsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildService", "GetAllGuilds", err)
			}
			res := NewGetAllGuildsResultOK(&body)
			return res, nil
		case 5:
			var (
				body GetAllGuildsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildService", "GetAllGuilds", err)
			}
			err = ValidateGetAllGuildsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildService", "GetAllGuilds", err)
			}
			return nil, NewGetAllGuildsNotFound(&body)
		case 13:
			var (
				body GetAllGuildsInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildService", "GetAllGuilds", err)
			}
			err = ValidateGetAllGuildsInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildService", "GetAllGuilds", err)
			}
			return nil, NewGetAllGuildsInternal(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("GuildService", "GetAllGuilds", resp.StatusCode, string(body))
		}
	}
}

// BuildGetSingleGuildRequest instantiates a HTTP request object with method
// and path set to call the "GuildService" service "GetSingleGuild" endpoint
func (c *Client) BuildGetSingleGuildRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		guildID string
	)
	{
		p, ok := v.(*guildservice.GetSingleGuildPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("GuildService", "GetSingleGuild", "*guildservice.GetSingleGuildPayload", v)
		}
		guildID = p.GuildID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetSingleGuildGuildServicePath(guildID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("GuildService", "GetSingleGuild", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetSingleGuildResponse returns a decoder for responses returned by the
// GuildService GetSingleGuild endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetSingleGuildResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): 5
//	- "internal" (type *goa.ServiceError): 13
//	- error: internal error
func DecodeGetSingleGuildResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetSingleGuildResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildService", "GetSingleGuild", err)
			}
			err = ValidateGetSingleGuildResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildService", "GetSingleGuild", err)
			}
			res := NewGetSingleGuildResultOK(&body)
			return res, nil
		case 5:
			var (
				body GetSingleGuildNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildService", "GetSingleGuild", err)
			}
			err = ValidateGetSingleGuildNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildService", "GetSingleGuild", err)
			}
			return nil, NewGetSingleGuildNotFound(&body)
		case 13:
			var (
				body GetSingleGuildInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildService", "GetSingleGuild", err)
			}
			err = ValidateGetSingleGuildInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildService", "GetSingleGuild", err)
			}
			return nil, NewGetSingleGuildInternal(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("GuildService", "GetSingleGuild", resp.StatusCode, string(body))
		}
	}
}

// BuildGetGuildMembersRequest instantiates a HTTP request object with method
// and path set to call the "GuildService" service "GetGuildMembers" endpoint
func (c *Client) BuildGetGuildMembersRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		guildID string
	)
	{
		p, ok := v.(*guildservice.GetGuildMembersPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("GuildService", "GetGuildMembers", "*guildservice.GetGuildMembersPayload", v)
		}
		guildID = p.GuildID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetGuildMembersGuildServicePath(guildID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("GuildService", "GetGuildMembers", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetGuildMembersResponse returns a decoder for responses returned by
// the GuildService GetGuildMembers endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetGuildMembersResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): 5
//	- "internal" (type *goa.ServiceError): 13
//	- error: internal error
func DecodeGetGuildMembersResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetGuildMembersResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildService", "GetGuildMembers", err)
			}
			res := NewGetGuildMembersResultOK(&body)
			return res, nil
		case 5:
			var (
				body GetGuildMembersNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildService", "GetGuildMembers", err)
			}
			err = ValidateGetGuildMembersNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildService", "GetGuildMembers", err)
			}
			return nil, NewGetGuildMembersNotFound(&body)
		case 13:
			var (
				body GetGuildMembersInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildService", "GetGuildMembers", err)
			}
			err = ValidateGetGuildMembersInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildService", "GetGuildMembers", err)
			}
			return nil, NewGetGuildMembersInternal(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("GuildService", "GetGuildMembers", resp.StatusCode, string(body))
		}
	}
}

// BuildGetGuildMasterAddressRequest instantiates a HTTP request object with
// method and path set to call the "GuildService" service
// "GetGuildMasterAddress" endpoint
func (c *Client) BuildGetGuildMasterAddressRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		guildID string
	)
	{
		p, ok := v.(*guildservice.GetGuildMasterAddressPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("GuildService", "GetGuildMasterAddress", "*guildservice.GetGuildMasterAddressPayload", v)
		}
		guildID = p.GuildID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetGuildMasterAddressGuildServicePath(guildID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("GuildService", "GetGuildMasterAddress", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetGuildMasterAddressResponse returns a decoder for responses returned
// by the GuildService GetGuildMasterAddress endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeGetGuildMasterAddressResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): 5
//	- "internal" (type *goa.ServiceError): 13
//	- error: internal error
func DecodeGetGuildMasterAddressResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetGuildMasterAddressResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildService", "GetGuildMasterAddress", err)
			}
			res := NewGetGuildMasterAddressResultOK(&body)
			return res, nil
		case 5:
			var (
				body GetGuildMasterAddressNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildService", "GetGuildMasterAddress", err)
			}
			err = ValidateGetGuildMasterAddressNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildService", "GetGuildMasterAddress", err)
			}
			return nil, NewGetGuildMasterAddressNotFound(&body)
		case 13:
			var (
				body GetGuildMasterAddressInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildService", "GetGuildMasterAddress", err)
			}
			err = ValidateGetGuildMasterAddressInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildService", "GetGuildMasterAddress", err)
			}
			return nil, NewGetGuildMasterAddressInternal(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("GuildService", "GetGuildMasterAddress", resp.StatusCode, string(body))
		}
	}
}

// BuildGetGuildDefaultMemberRequest instantiates a HTTP request object with
// method and path set to call the "GuildService" service
// "GetGuildDefaultMember" endpoint
func (c *Client) BuildGetGuildDefaultMemberRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		guildID string
	)
	{
		p, ok := v.(*guildservice.GetGuildDefaultMemberPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("GuildService", "GetGuildDefaultMember", "*guildservice.GetGuildDefaultMemberPayload", v)
		}
		guildID = p.GuildID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetGuildDefaultMemberGuildServicePath(guildID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("GuildService", "GetGuildDefaultMember", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetGuildDefaultMemberResponse returns a decoder for responses returned
// by the GuildService GetGuildDefaultMember endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeGetGuildDefaultMemberResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): 5
//	- "internal" (type *goa.ServiceError): 13
//	- error: internal error
func DecodeGetGuildDefaultMemberResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetGuildDefaultMemberResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildService", "GetGuildDefaultMember", err)
			}
			res := NewGetGuildDefaultMemberResultOK(&body)
			return res, nil
		case 5:
			var (
				body GetGuildDefaultMemberNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildService", "GetGuildDefaultMember", err)
			}
			err = ValidateGetGuildDefaultMemberNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildService", "GetGuildDefaultMember", err)
			}
			return nil, NewGetGuildDefaultMemberNotFound(&body)
		case 13:
			var (
				body GetGuildDefaultMemberInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildService", "GetGuildDefaultMember", err)
			}
			err = ValidateGetGuildDefaultMemberInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildService", "GetGuildDefaultMember", err)
			}
			return nil, NewGetGuildDefaultMemberInternal(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("GuildService", "GetGuildDefaultMember", resp.StatusCode, string(body))
		}
	}
}

// BuildEnterGuildRequest instantiates a HTTP request object with method and
// path set to call the "GuildService" service "EnterGuild" endpoint
func (c *Client) BuildEnterGuildRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		guildID string
	)
	{
		p, ok := v.(*guildservice.EnterGuildPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("GuildService", "EnterGuild", "*guildservice.EnterGuildPayload", v)
		}
		if p.GuildID != nil {
			guildID = *p.GuildID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: EnterGuildGuildServicePath(guildID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("GuildService", "EnterGuild", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeEnterGuildRequest returns an encoder for requests sent to the
// GuildService EnterGuild server.
func EncodeEnterGuildRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*guildservice.EnterGuildPayload)
		if !ok {
			return goahttp.ErrInvalidType("GuildService", "EnterGuild", "*guildservice.EnterGuildPayload", v)
		}
		body := NewEnterGuildRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("GuildService", "EnterGuild", err)
		}
		return nil
	}
}

// DecodeEnterGuildResponse returns a decoder for responses returned by the
// GuildService EnterGuild endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeEnterGuildResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): 5
//	- "internal" (type *goa.ServiceError): 13
//	- error: internal error
func DecodeEnterGuildResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body EnterGuildResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildService", "EnterGuild", err)
			}
			res := NewEnterGuildResultOK(&body)
			return res, nil
		case 5:
			var (
				body EnterGuildNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildService", "EnterGuild", err)
			}
			err = ValidateEnterGuildNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildService", "EnterGuild", err)
			}
			return nil, NewEnterGuildNotFound(&body)
		case 13:
			var (
				body EnterGuildInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildService", "EnterGuild", err)
			}
			err = ValidateEnterGuildInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildService", "EnterGuild", err)
			}
			return nil, NewEnterGuildInternal(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("GuildService", "EnterGuild", resp.StatusCode, string(body))
		}
	}
}

// BuildLeaveGuildRequest instantiates a HTTP request object with method and
// path set to call the "GuildService" service "LeaveGuild" endpoint
func (c *Client) BuildLeaveGuildRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		guildID string
	)
	{
		p, ok := v.(*guildservice.LeaveGuildPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("GuildService", "LeaveGuild", "*guildservice.LeaveGuildPayload", v)
		}
		if p.GuildID != nil {
			guildID = *p.GuildID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LeaveGuildGuildServicePath(guildID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("GuildService", "LeaveGuild", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeLeaveGuildRequest returns an encoder for requests sent to the
// GuildService LeaveGuild server.
func EncodeLeaveGuildRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*guildservice.LeaveGuildPayload)
		if !ok {
			return goahttp.ErrInvalidType("GuildService", "LeaveGuild", "*guildservice.LeaveGuildPayload", v)
		}
		body := NewLeaveGuildRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("GuildService", "LeaveGuild", err)
		}
		return nil
	}
}

// DecodeLeaveGuildResponse returns a decoder for responses returned by the
// GuildService LeaveGuild endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeLeaveGuildResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): 5
//	- "internal" (type *goa.ServiceError): 13
//	- error: internal error
func DecodeLeaveGuildResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body LeaveGuildResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildService", "LeaveGuild", err)
			}
			res := NewLeaveGuildResultOK(&body)
			return res, nil
		case 5:
			var (
				body LeaveGuildNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildService", "LeaveGuild", err)
			}
			err = ValidateLeaveGuildNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildService", "LeaveGuild", err)
			}
			return nil, NewLeaveGuildNotFound(&body)
		case 13:
			var (
				body LeaveGuildInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildService", "LeaveGuild", err)
			}
			err = ValidateLeaveGuildInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildService", "LeaveGuild", err)
			}
			return nil, NewLeaveGuildInternal(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("GuildService", "LeaveGuild", resp.StatusCode, string(body))
		}
	}
}

// BuildGetGuildMarketsRequest instantiates a HTTP request object with method
// and path set to call the "GuildService" service "GetGuildMarkets" endpoint
func (c *Client) BuildGetGuildMarketsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		guildID string
	)
	{
		p, ok := v.(*guildservice.GetGuildMarketsPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("GuildService", "GetGuildMarkets", "*guildservice.GetGuildMarketsPayload", v)
		}
		guildID = p.GuildID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetGuildMarketsGuildServicePath(guildID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("GuildService", "GetGuildMarkets", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetGuildMarketsResponse returns a decoder for responses returned by
// the GuildService GetGuildMarkets endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetGuildMarketsResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): 5
//	- "internal" (type *goa.ServiceError): 13
//	- error: internal error
func DecodeGetGuildMarketsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetGuildMarketsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildService", "GetGuildMarkets", err)
			}
			err = ValidateGetGuildMarketsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildService", "GetGuildMarkets", err)
			}
			res := NewGetGuildMarketsResultOK(&body)
			return res, nil
		case 5:
			var (
				body GetGuildMarketsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildService", "GetGuildMarkets", err)
			}
			err = ValidateGetGuildMarketsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildService", "GetGuildMarkets", err)
			}
			return nil, NewGetGuildMarketsNotFound(&body)
		case 13:
			var (
				body GetGuildMarketsInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildService", "GetGuildMarkets", err)
			}
			err = ValidateGetGuildMarketsInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildService", "GetGuildMarkets", err)
			}
			return nil, NewGetGuildMarketsInternal(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("GuildService", "GetGuildMarkets", resp.StatusCode, string(body))
		}
	}
}

// BuildGetAccountPortfolioRequest instantiates a HTTP request object with
// method and path set to call the "GuildService" service "GetAccountPortfolio"
// endpoint
func (c *Client) BuildGetAccountPortfolioRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		guildID string
	)
	{
		p, ok := v.(*guildservice.GetAccountPortfolioPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("GuildService", "GetAccountPortfolio", "*guildservice.GetAccountPortfolioPayload", v)
		}
		guildID = p.GuildID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetAccountPortfolioGuildServicePath(guildID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("GuildService", "GetAccountPortfolio", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetAccountPortfolioRequest returns an encoder for requests sent to the
// GuildService GetAccountPortfolio server.
func EncodeGetAccountPortfolioRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*guildservice.GetAccountPortfolioPayload)
		if !ok {
			return goahttp.ErrInvalidType("GuildService", "GetAccountPortfolio", "*guildservice.GetAccountPortfolioPayload", v)
		}
		values := req.URL.Query()
		values.Add("injective_address", p.InjectiveAddress)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetAccountPortfolioResponse returns a decoder for responses returned
// by the GuildService GetAccountPortfolio endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeGetAccountPortfolioResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): 5
//	- "internal" (type *goa.ServiceError): 13
//	- error: internal error
func DecodeGetAccountPortfolioResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetAccountPortfolioResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildService", "GetAccountPortfolio", err)
			}
			err = ValidateGetAccountPortfolioResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildService", "GetAccountPortfolio", err)
			}
			res := NewGetAccountPortfolioResultOK(&body)
			return res, nil
		case 5:
			var (
				body GetAccountPortfolioNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildService", "GetAccountPortfolio", err)
			}
			err = ValidateGetAccountPortfolioNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildService", "GetAccountPortfolio", err)
			}
			return nil, NewGetAccountPortfolioNotFound(&body)
		case 13:
			var (
				body GetAccountPortfolioInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildService", "GetAccountPortfolio", err)
			}
			err = ValidateGetAccountPortfolioInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildService", "GetAccountPortfolio", err)
			}
			return nil, NewGetAccountPortfolioInternal(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("GuildService", "GetAccountPortfolio", resp.StatusCode, string(body))
		}
	}
}

// BuildGetAccountPortfoliosRequest instantiates a HTTP request object with
// method and path set to call the "GuildService" service
// "GetAccountPortfolios" endpoint
func (c *Client) BuildGetAccountPortfoliosRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		guildID string
	)
	{
		p, ok := v.(*guildservice.GetAccountPortfoliosPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("GuildService", "GetAccountPortfolios", "*guildservice.GetAccountPortfoliosPayload", v)
		}
		guildID = p.GuildID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetAccountPortfoliosGuildServicePath(guildID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("GuildService", "GetAccountPortfolios", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetAccountPortfoliosRequest returns an encoder for requests sent to
// the GuildService GetAccountPortfolios server.
func EncodeGetAccountPortfoliosRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*guildservice.GetAccountPortfoliosPayload)
		if !ok {
			return goahttp.ErrInvalidType("GuildService", "GetAccountPortfolios", "*guildservice.GetAccountPortfoliosPayload", v)
		}
		values := req.URL.Query()
		values.Add("injective_address", p.InjectiveAddress)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetAccountPortfoliosResponse returns a decoder for responses returned
// by the GuildService GetAccountPortfolios endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeGetAccountPortfoliosResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): 5
//	- "internal" (type *goa.ServiceError): 13
//	- error: internal error
func DecodeGetAccountPortfoliosResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetAccountPortfoliosResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildService", "GetAccountPortfolios", err)
			}
			err = ValidateGetAccountPortfoliosResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildService", "GetAccountPortfolios", err)
			}
			res := NewGetAccountPortfoliosResultOK(&body)
			return res, nil
		case 5:
			var (
				body GetAccountPortfoliosNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildService", "GetAccountPortfolios", err)
			}
			err = ValidateGetAccountPortfoliosNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildService", "GetAccountPortfolios", err)
			}
			return nil, NewGetAccountPortfoliosNotFound(&body)
		case 13:
			var (
				body GetAccountPortfoliosInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildService", "GetAccountPortfolios", err)
			}
			err = ValidateGetAccountPortfoliosInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildService", "GetAccountPortfolios", err)
			}
			return nil, NewGetAccountPortfoliosInternal(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("GuildService", "GetAccountPortfolios", resp.StatusCode, string(body))
		}
	}
}

// unmarshalGuildResponseBodyToGuildserviceGuild builds a value of type
// *guildservice.Guild from a value of type *GuildResponseBody.
func unmarshalGuildResponseBodyToGuildserviceGuild(v *GuildResponseBody) *guildservice.Guild {
	if v == nil {
		return nil
	}
	res := &guildservice.Guild{
		ID:                         *v.ID,
		Name:                       *v.Name,
		Description:                *v.Description,
		MasterAddress:              v.MasterAddress,
		SpotBaseRequirement:        *v.SpotBaseRequirement,
		SpotQuoteRequirement:       *v.SpotQuoteRequirement,
		DerivativeQuoteRequirement: v.DerivativeQuoteRequirement,
		StakingRequirement:         *v.StakingRequirement,
		Capacity:                   *v.Capacity,
	}

	return res
}

// unmarshalGuildMemberResponseBodyToGuildserviceGuildMember builds a value of
// type *guildservice.GuildMember from a value of type *GuildMemberResponseBody.
func unmarshalGuildMemberResponseBodyToGuildserviceGuildMember(v *GuildMemberResponseBody) *guildservice.GuildMember {
	if v == nil {
		return nil
	}
	res := &guildservice.GuildMember{
		InjectiveAddress:     v.InjectiveAddress,
		IsDefaultGuildMember: v.IsDefaultGuildMember,
	}

	return res
}

// unmarshalMarketResponseBodyToGuildserviceMarket builds a value of type
// *guildservice.Market from a value of type *MarketResponseBody.
func unmarshalMarketResponseBodyToGuildserviceMarket(v *MarketResponseBody) *guildservice.Market {
	if v == nil {
		return nil
	}
	res := &guildservice.Market{
		MarketID:    *v.MarketID,
		IsPerpetual: *v.IsPerpetual,
	}

	return res
}

// unmarshalSingleAccountPortfolioResponseBodyToGuildserviceSingleAccountPortfolio
// builds a value of type *guildservice.SingleAccountPortfolio from a value of
// type *SingleAccountPortfolioResponseBody.
func unmarshalSingleAccountPortfolioResponseBodyToGuildserviceSingleAccountPortfolio(v *SingleAccountPortfolioResponseBody) *guildservice.SingleAccountPortfolio {
	if v == nil {
		return nil
	}
	res := &guildservice.SingleAccountPortfolio{
		InjectiveAddress: *v.InjectiveAddress,
		Denom:            *v.Denom,
		TotalBalance:     *v.TotalBalance,
		AvailableBalance: *v.AvailableBalance,
		UnrealizedPnl:    *v.UnrealizedPnl,
		MarginHold:       *v.MarginHold,
		UpdatedAt:        *v.UpdatedAt,
	}

	return res
}

// unmarshalAccountPorfoliosResponseBodyToGuildserviceAccountPorfolios builds a
// value of type *guildservice.AccountPorfolios from a value of type
// *AccountPorfoliosResponseBody.
func unmarshalAccountPorfoliosResponseBodyToGuildserviceAccountPorfolios(v *AccountPorfoliosResponseBody) *guildservice.AccountPorfolios {
	if v == nil {
		return nil
	}
	res := &guildservice.AccountPorfolios{
		InjectiveAddress: *v.InjectiveAddress,
	}
	res.Portfolios = make([]*guildservice.EmbededAccountPortfolio, len(v.Portfolios))
	for i, val := range v.Portfolios {
		res.Portfolios[i] = unmarshalEmbededAccountPortfolioResponseBodyToGuildserviceEmbededAccountPortfolio(val)
	}

	return res
}

// unmarshalEmbededAccountPortfolioResponseBodyToGuildserviceEmbededAccountPortfolio
// builds a value of type *guildservice.EmbededAccountPortfolio from a value of
// type *EmbededAccountPortfolioResponseBody.
func unmarshalEmbededAccountPortfolioResponseBodyToGuildserviceEmbededAccountPortfolio(v *EmbededAccountPortfolioResponseBody) *guildservice.EmbededAccountPortfolio {
	res := &guildservice.EmbededAccountPortfolio{
		Denom:            *v.Denom,
		TotalBalance:     *v.TotalBalance,
		AvailableBalance: *v.AvailableBalance,
		UnrealizedPnl:    *v.UnrealizedPnl,
		MarginHold:       *v.MarginHold,
		UpdatedAt:        *v.UpdatedAt,
	}

	return res
}
