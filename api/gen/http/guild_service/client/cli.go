// Code generated by goa v3.6.2, DO NOT EDIT.
//
// GuildService HTTP client CLI support package
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-guilds-service/api/design -o ../

package client

import (
	"encoding/json"
	"fmt"

	guildservice "github.com/InjectiveLabs/injective-guilds-service/api/gen/guild_service"
)

// BuildGetSingleGuildPayload builds the payload for the GuildService
// GetSingleGuild endpoint from CLI flags.
func BuildGetSingleGuildPayload(guildServiceGetSingleGuildGuildID string) (*guildservice.GetSingleGuildPayload, error) {
	var guildID string
	{
		guildID = guildServiceGetSingleGuildGuildID
	}
	v := &guildservice.GetSingleGuildPayload{}
	v.GuildID = guildID

	return v, nil
}

// BuildGetGuildMembersPayload builds the payload for the GuildService
// GetGuildMembers endpoint from CLI flags.
func BuildGetGuildMembersPayload(guildServiceGetGuildMembersGuildID string) (*guildservice.GetGuildMembersPayload, error) {
	var guildID string
	{
		guildID = guildServiceGetGuildMembersGuildID
	}
	v := &guildservice.GetGuildMembersPayload{}
	v.GuildID = guildID

	return v, nil
}

// BuildGetGuildMasterAddressPayload builds the payload for the GuildService
// GetGuildMasterAddress endpoint from CLI flags.
func BuildGetGuildMasterAddressPayload(guildServiceGetGuildMasterAddressGuildID string) (*guildservice.GetGuildMasterAddressPayload, error) {
	var guildID string
	{
		guildID = guildServiceGetGuildMasterAddressGuildID
	}
	v := &guildservice.GetGuildMasterAddressPayload{}
	v.GuildID = guildID

	return v, nil
}

// BuildGetGuildDefaultMemberPayload builds the payload for the GuildService
// GetGuildDefaultMember endpoint from CLI flags.
func BuildGetGuildDefaultMemberPayload(guildServiceGetGuildDefaultMemberGuildID string) (*guildservice.GetGuildDefaultMemberPayload, error) {
	var guildID string
	{
		guildID = guildServiceGetGuildDefaultMemberGuildID
	}
	v := &guildservice.GetGuildDefaultMemberPayload{}
	v.GuildID = guildID

	return v, nil
}

// BuildEnterGuildPayload builds the payload for the GuildService EnterGuild
// endpoint from CLI flags.
func BuildEnterGuildPayload(guildServiceEnterGuildBody string, guildServiceEnterGuildGuildID string) (*guildservice.EnterGuildPayload, error) {
	var err error
	var body EnterGuildRequestBody
	{
		err = json.Unmarshal([]byte(guildServiceEnterGuildBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"message\": \"Magnam dolorem nostrum velit non ipsa.\",\n      \"public_key\": \"Nulla et ipsum autem inventore sed maxime.\",\n      \"signature\": \"Autem est sit nesciunt ea et velit.\"\n   }'")
		}
	}
	var guildID string
	{
		guildID = guildServiceEnterGuildGuildID
	}
	v := &guildservice.EnterGuildPayload{
		PublicKey: body.PublicKey,
		Message:   body.Message,
		Signature: body.Signature,
	}
	v.GuildID = &guildID

	return v, nil
}

// BuildLeaveGuildPayload builds the payload for the GuildService LeaveGuild
// endpoint from CLI flags.
func BuildLeaveGuildPayload(guildServiceLeaveGuildBody string, guildServiceLeaveGuildGuildID string) (*guildservice.LeaveGuildPayload, error) {
	var err error
	var body LeaveGuildRequestBody
	{
		err = json.Unmarshal([]byte(guildServiceLeaveGuildBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"message\": \"Laboriosam occaecati deleniti dolor.\",\n      \"public_key\": \"Velit sit rerum inventore ut.\",\n      \"signature\": \"Cupiditate qui ab accusantium modi alias officiis.\"\n   }'")
		}
	}
	var guildID string
	{
		guildID = guildServiceLeaveGuildGuildID
	}
	v := &guildservice.LeaveGuildPayload{
		PublicKey: body.PublicKey,
		Message:   body.Message,
		Signature: body.Signature,
	}
	v.GuildID = &guildID

	return v, nil
}

// BuildGetGuildMarketsPayload builds the payload for the GuildService
// GetGuildMarkets endpoint from CLI flags.
func BuildGetGuildMarketsPayload(guildServiceGetGuildMarketsGuildID string) (*guildservice.GetGuildMarketsPayload, error) {
	var guildID string
	{
		guildID = guildServiceGetGuildMarketsGuildID
	}
	v := &guildservice.GetGuildMarketsPayload{}
	v.GuildID = guildID

	return v, nil
}

// BuildGetAccountPortfolioPayload builds the payload for the GuildService
// GetAccountPortfolio endpoint from CLI flags.
func BuildGetAccountPortfolioPayload(guildServiceGetAccountPortfolioGuildID string, guildServiceGetAccountPortfolioInjectiveAddress string) (*guildservice.GetAccountPortfolioPayload, error) {
	var guildID string
	{
		guildID = guildServiceGetAccountPortfolioGuildID
	}
	var injectiveAddress string
	{
		injectiveAddress = guildServiceGetAccountPortfolioInjectiveAddress
	}
	v := &guildservice.GetAccountPortfolioPayload{}
	v.GuildID = guildID
	v.InjectiveAddress = injectiveAddress

	return v, nil
}

// BuildGetAccountPortfoliosPayload builds the payload for the GuildService
// GetAccountPortfolios endpoint from CLI flags.
func BuildGetAccountPortfoliosPayload(guildServiceGetAccountPortfoliosGuildID string, guildServiceGetAccountPortfoliosInjectiveAddress string) (*guildservice.GetAccountPortfoliosPayload, error) {
	var guildID string
	{
		guildID = guildServiceGetAccountPortfoliosGuildID
	}
	var injectiveAddress string
	{
		injectiveAddress = guildServiceGetAccountPortfoliosInjectiveAddress
	}
	v := &guildservice.GetAccountPortfoliosPayload{}
	v.GuildID = guildID
	v.InjectiveAddress = injectiveAddress

	return v, nil
}
