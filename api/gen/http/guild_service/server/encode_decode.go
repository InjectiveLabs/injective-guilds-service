// Code generated by goa v3.6.2, DO NOT EDIT.
//
// GuildService HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-guilds-service/api/design -o ../

package server

import (
	"context"
	"errors"
	"io"
	"net/http"

	guildservice "github.com/InjectiveLabs/injective-guilds-service/api/gen/guild_service"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetAllGuildsResponse returns an encoder for responses returned by the
// GuildService GetAllGuilds endpoint.
func EncodeGetAllGuildsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*guildservice.GetAllGuildsResult)
		enc := encoder(ctx, w)
		body := NewGetAllGuildsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeGetAllGuildsError returns an encoder for errors returned by the
// GetAllGuilds GuildService endpoint.
func EncodeGetAllGuildsError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetAllGuildsNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(5)
			return enc.Encode(body)
		case "internal":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetAllGuildsInternalResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(13)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetSingleGuildResponse returns an encoder for responses returned by
// the GuildService GetSingleGuild endpoint.
func EncodeGetSingleGuildResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*guildservice.GetSingleGuildResult)
		enc := encoder(ctx, w)
		body := NewGetSingleGuildResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetSingleGuildRequest returns a decoder for requests sent to the
// GuildService GetSingleGuild endpoint.
func DecodeGetSingleGuildRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			guildID string

			params = mux.Vars(r)
		)
		guildID = params["guildID"]
		payload := NewGetSingleGuildPayload(guildID)

		return payload, nil
	}
}

// EncodeGetSingleGuildError returns an encoder for errors returned by the
// GetSingleGuild GuildService endpoint.
func EncodeGetSingleGuildError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetSingleGuildNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(5)
			return enc.Encode(body)
		case "internal":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetSingleGuildInternalResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(13)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetGuildMembersResponse returns an encoder for responses returned by
// the GuildService GetGuildMembers endpoint.
func EncodeGetGuildMembersResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*guildservice.GetGuildMembersResult)
		enc := encoder(ctx, w)
		body := NewGetGuildMembersResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetGuildMembersRequest returns a decoder for requests sent to the
// GuildService GetGuildMembers endpoint.
func DecodeGetGuildMembersRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			guildID string

			params = mux.Vars(r)
		)
		guildID = params["guildID"]
		payload := NewGetGuildMembersPayload(guildID)

		return payload, nil
	}
}

// EncodeGetGuildMembersError returns an encoder for errors returned by the
// GetGuildMembers GuildService endpoint.
func EncodeGetGuildMembersError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetGuildMembersNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(5)
			return enc.Encode(body)
		case "internal":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetGuildMembersInternalResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(13)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetGuildMasterAddressResponse returns an encoder for responses
// returned by the GuildService GetGuildMasterAddress endpoint.
func EncodeGetGuildMasterAddressResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*guildservice.GetGuildMasterAddressResult)
		enc := encoder(ctx, w)
		body := NewGetGuildMasterAddressResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetGuildMasterAddressRequest returns a decoder for requests sent to
// the GuildService GetGuildMasterAddress endpoint.
func DecodeGetGuildMasterAddressRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			guildID string

			params = mux.Vars(r)
		)
		guildID = params["guildID"]
		payload := NewGetGuildMasterAddressPayload(guildID)

		return payload, nil
	}
}

// EncodeGetGuildMasterAddressError returns an encoder for errors returned by
// the GetGuildMasterAddress GuildService endpoint.
func EncodeGetGuildMasterAddressError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetGuildMasterAddressNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(5)
			return enc.Encode(body)
		case "internal":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetGuildMasterAddressInternalResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(13)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetGuildDefaultMemberResponse returns an encoder for responses
// returned by the GuildService GetGuildDefaultMember endpoint.
func EncodeGetGuildDefaultMemberResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*guildservice.GetGuildDefaultMemberResult)
		enc := encoder(ctx, w)
		body := NewGetGuildDefaultMemberResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetGuildDefaultMemberRequest returns a decoder for requests sent to
// the GuildService GetGuildDefaultMember endpoint.
func DecodeGetGuildDefaultMemberRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			guildID string

			params = mux.Vars(r)
		)
		guildID = params["guildID"]
		payload := NewGetGuildDefaultMemberPayload(guildID)

		return payload, nil
	}
}

// EncodeGetGuildDefaultMemberError returns an encoder for errors returned by
// the GetGuildDefaultMember GuildService endpoint.
func EncodeGetGuildDefaultMemberError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetGuildDefaultMemberNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(5)
			return enc.Encode(body)
		case "internal":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetGuildDefaultMemberInternalResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(13)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeEnterGuildResponse returns an encoder for responses returned by the
// GuildService EnterGuild endpoint.
func EncodeEnterGuildResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*guildservice.EnterGuildResult)
		enc := encoder(ctx, w)
		body := NewEnterGuildResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeEnterGuildRequest returns a decoder for requests sent to the
// GuildService EnterGuild endpoint.
func DecodeEnterGuildRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body EnterGuildRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}

		var (
			guildID string

			params = mux.Vars(r)
		)
		guildID = params["guildID"]
		payload := NewEnterGuildPayload(&body, guildID)

		return payload, nil
	}
}

// EncodeEnterGuildError returns an encoder for errors returned by the
// EnterGuild GuildService endpoint.
func EncodeEnterGuildError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewEnterGuildNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(5)
			return enc.Encode(body)
		case "internal":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewEnterGuildInternalResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(13)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeLeaveGuildResponse returns an encoder for responses returned by the
// GuildService LeaveGuild endpoint.
func EncodeLeaveGuildResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*guildservice.LeaveGuildResult)
		enc := encoder(ctx, w)
		body := NewLeaveGuildResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeLeaveGuildRequest returns a decoder for requests sent to the
// GuildService LeaveGuild endpoint.
func DecodeLeaveGuildRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body LeaveGuildRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}

		var (
			guildID string

			params = mux.Vars(r)
		)
		guildID = params["guildID"]
		payload := NewLeaveGuildPayload(&body, guildID)

		return payload, nil
	}
}

// EncodeLeaveGuildError returns an encoder for errors returned by the
// LeaveGuild GuildService endpoint.
func EncodeLeaveGuildError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewLeaveGuildNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(5)
			return enc.Encode(body)
		case "internal":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewLeaveGuildInternalResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(13)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetGuildMarketsResponse returns an encoder for responses returned by
// the GuildService GetGuildMarkets endpoint.
func EncodeGetGuildMarketsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*guildservice.GetGuildMarketsResult)
		enc := encoder(ctx, w)
		body := NewGetGuildMarketsResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetGuildMarketsRequest returns a decoder for requests sent to the
// GuildService GetGuildMarkets endpoint.
func DecodeGetGuildMarketsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			guildID string

			params = mux.Vars(r)
		)
		guildID = params["guildID"]
		payload := NewGetGuildMarketsPayload(guildID)

		return payload, nil
	}
}

// EncodeGetGuildMarketsError returns an encoder for errors returned by the
// GetGuildMarkets GuildService endpoint.
func EncodeGetGuildMarketsError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetGuildMarketsNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(5)
			return enc.Encode(body)
		case "internal":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetGuildMarketsInternalResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(13)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetAccountPortfolioResponse returns an encoder for responses returned
// by the GuildService GetAccountPortfolio endpoint.
func EncodeGetAccountPortfolioResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*guildservice.GetAccountPortfolioResult)
		enc := encoder(ctx, w)
		body := NewGetAccountPortfolioResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetAccountPortfolioRequest returns a decoder for requests sent to the
// GuildService GetAccountPortfolio endpoint.
func DecodeGetAccountPortfolioRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			guildID          string
			injectiveAddress string
			err              error

			params = mux.Vars(r)
		)
		guildID = params["guildID"]
		injectiveAddress = r.URL.Query().Get("injective_address")
		if injectiveAddress == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("injective_address", "query string"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetAccountPortfolioPayload(guildID, injectiveAddress)

		return payload, nil
	}
}

// EncodeGetAccountPortfolioError returns an encoder for errors returned by the
// GetAccountPortfolio GuildService endpoint.
func EncodeGetAccountPortfolioError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetAccountPortfolioNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(5)
			return enc.Encode(body)
		case "internal":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetAccountPortfolioInternalResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(13)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeGetAccountPortfoliosResponse returns an encoder for responses returned
// by the GuildService GetAccountPortfolios endpoint.
func EncodeGetAccountPortfoliosResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*guildservice.GetAccountPortfoliosResult)
		enc := encoder(ctx, w)
		body := NewGetAccountPortfoliosResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetAccountPortfoliosRequest returns a decoder for requests sent to the
// GuildService GetAccountPortfolios endpoint.
func DecodeGetAccountPortfoliosRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			guildID          string
			injectiveAddress string
			err              error

			params = mux.Vars(r)
		)
		guildID = params["guildID"]
		injectiveAddress = r.URL.Query().Get("injective_address")
		if injectiveAddress == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("injective_address", "query string"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetAccountPortfoliosPayload(guildID, injectiveAddress)

		return payload, nil
	}
}

// EncodeGetAccountPortfoliosError returns an encoder for errors returned by
// the GetAccountPortfolios GuildService endpoint.
func EncodeGetAccountPortfoliosError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		var en ErrorNamer
		if !errors.As(v, &en) {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "not_found":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetAccountPortfoliosNotFoundResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(5)
			return enc.Encode(body)
		case "internal":
			var res *goa.ServiceError
			errors.As(v, &res)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewGetAccountPortfoliosInternalResponseBody(res)
			}
			w.Header().Set("goa-error", res.ErrorName())
			w.WriteHeader(13)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalGuildserviceGuildToGuildResponseBody builds a value of type
// *GuildResponseBody from a value of type *guildservice.Guild.
func marshalGuildserviceGuildToGuildResponseBody(v *guildservice.Guild) *GuildResponseBody {
	if v == nil {
		return nil
	}
	res := &GuildResponseBody{
		ID:                         v.ID,
		Name:                       v.Name,
		Description:                v.Description,
		MasterAddress:              v.MasterAddress,
		SpotBaseRequirement:        v.SpotBaseRequirement,
		SpotQuoteRequirement:       v.SpotQuoteRequirement,
		DerivativeQuoteRequirement: v.DerivativeQuoteRequirement,
		StakingRequirement:         v.StakingRequirement,
		Capacity:                   v.Capacity,
	}

	return res
}

// marshalGuildserviceGuildMemberToGuildMemberResponseBody builds a value of
// type *GuildMemberResponseBody from a value of type *guildservice.GuildMember.
func marshalGuildserviceGuildMemberToGuildMemberResponseBody(v *guildservice.GuildMember) *GuildMemberResponseBody {
	if v == nil {
		return nil
	}
	res := &GuildMemberResponseBody{
		InjectiveAddress:     v.InjectiveAddress,
		IsDefaultGuildMember: v.IsDefaultGuildMember,
	}

	return res
}

// marshalGuildserviceMarketToMarketResponseBody builds a value of type
// *MarketResponseBody from a value of type *guildservice.Market.
func marshalGuildserviceMarketToMarketResponseBody(v *guildservice.Market) *MarketResponseBody {
	if v == nil {
		return nil
	}
	res := &MarketResponseBody{
		MarketID:    v.MarketID,
		IsPerpetual: v.IsPerpetual,
	}

	return res
}

// marshalGuildserviceSingleAccountPortfolioToSingleAccountPortfolioResponseBody
// builds a value of type *SingleAccountPortfolioResponseBody from a value of
// type *guildservice.SingleAccountPortfolio.
func marshalGuildserviceSingleAccountPortfolioToSingleAccountPortfolioResponseBody(v *guildservice.SingleAccountPortfolio) *SingleAccountPortfolioResponseBody {
	if v == nil {
		return nil
	}
	res := &SingleAccountPortfolioResponseBody{
		InjectiveAddress: v.InjectiveAddress,
		Denom:            v.Denom,
		TotalBalance:     v.TotalBalance,
		AvailableBalance: v.AvailableBalance,
		UnrealizedPnl:    v.UnrealizedPnl,
		MarginHold:       v.MarginHold,
		UpdatedAt:        v.UpdatedAt,
	}

	return res
}

// marshalGuildserviceAccountPorfoliosToAccountPorfoliosResponseBody builds a
// value of type *AccountPorfoliosResponseBody from a value of type
// *guildservice.AccountPorfolios.
func marshalGuildserviceAccountPorfoliosToAccountPorfoliosResponseBody(v *guildservice.AccountPorfolios) *AccountPorfoliosResponseBody {
	if v == nil {
		return nil
	}
	res := &AccountPorfoliosResponseBody{
		InjectiveAddress: v.InjectiveAddress,
	}
	if v.Portfolios != nil {
		res.Portfolios = make([]*EmbededAccountPortfolioResponseBody, len(v.Portfolios))
		for i, val := range v.Portfolios {
			res.Portfolios[i] = marshalGuildserviceEmbededAccountPortfolioToEmbededAccountPortfolioResponseBody(val)
		}
	}

	return res
}

// marshalGuildserviceEmbededAccountPortfolioToEmbededAccountPortfolioResponseBody
// builds a value of type *EmbededAccountPortfolioResponseBody from a value of
// type *guildservice.EmbededAccountPortfolio.
func marshalGuildserviceEmbededAccountPortfolioToEmbededAccountPortfolioResponseBody(v *guildservice.EmbededAccountPortfolio) *EmbededAccountPortfolioResponseBody {
	res := &EmbededAccountPortfolioResponseBody{
		Denom:            v.Denom,
		TotalBalance:     v.TotalBalance,
		AvailableBalance: v.AvailableBalance,
		UnrealizedPnl:    v.UnrealizedPnl,
		MarginHold:       v.MarginHold,
		UpdatedAt:        v.UpdatedAt,
	}

	return res
}
