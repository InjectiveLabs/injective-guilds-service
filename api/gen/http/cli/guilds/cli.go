// Code generated by goa v3.6.2, DO NOT EDIT.
//
// Guilds HTTP client CLI support package
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-guilds-service/api/design -o ../

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	guildservicec "github.com/InjectiveLabs/injective-guilds-service/api/gen/http/guild_service/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `guild-service (get-all-guilds|get-single-guild|get-guild-members|get-guild-master-address|get-guild-default-member|enter-guild|leave-guild|get-guild-markets|get-account-portfolio|get-account-portfolios)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` guild-service get-all-guilds` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		guildServiceFlags = flag.NewFlagSet("guild-service", flag.ContinueOnError)

		guildServiceGetAllGuildsFlags = flag.NewFlagSet("get-all-guilds", flag.ExitOnError)

		guildServiceGetSingleGuildFlags       = flag.NewFlagSet("get-single-guild", flag.ExitOnError)
		guildServiceGetSingleGuildGuildIDFlag = guildServiceGetSingleGuildFlags.String("guild-id", "REQUIRED", "")

		guildServiceGetGuildMembersFlags       = flag.NewFlagSet("get-guild-members", flag.ExitOnError)
		guildServiceGetGuildMembersGuildIDFlag = guildServiceGetGuildMembersFlags.String("guild-id", "REQUIRED", "")

		guildServiceGetGuildMasterAddressFlags       = flag.NewFlagSet("get-guild-master-address", flag.ExitOnError)
		guildServiceGetGuildMasterAddressGuildIDFlag = guildServiceGetGuildMasterAddressFlags.String("guild-id", "REQUIRED", "")

		guildServiceGetGuildDefaultMemberFlags       = flag.NewFlagSet("get-guild-default-member", flag.ExitOnError)
		guildServiceGetGuildDefaultMemberGuildIDFlag = guildServiceGetGuildDefaultMemberFlags.String("guild-id", "REQUIRED", "")

		guildServiceEnterGuildFlags       = flag.NewFlagSet("enter-guild", flag.ExitOnError)
		guildServiceEnterGuildBodyFlag    = guildServiceEnterGuildFlags.String("body", "REQUIRED", "")
		guildServiceEnterGuildGuildIDFlag = guildServiceEnterGuildFlags.String("guild-id", "REQUIRED", "")

		guildServiceLeaveGuildFlags       = flag.NewFlagSet("leave-guild", flag.ExitOnError)
		guildServiceLeaveGuildBodyFlag    = guildServiceLeaveGuildFlags.String("body", "REQUIRED", "")
		guildServiceLeaveGuildGuildIDFlag = guildServiceLeaveGuildFlags.String("guild-id", "REQUIRED", "")

		guildServiceGetGuildMarketsFlags       = flag.NewFlagSet("get-guild-markets", flag.ExitOnError)
		guildServiceGetGuildMarketsGuildIDFlag = guildServiceGetGuildMarketsFlags.String("guild-id", "REQUIRED", "")

		guildServiceGetAccountPortfolioFlags                = flag.NewFlagSet("get-account-portfolio", flag.ExitOnError)
		guildServiceGetAccountPortfolioGuildIDFlag          = guildServiceGetAccountPortfolioFlags.String("guild-id", "REQUIRED", "")
		guildServiceGetAccountPortfolioInjectiveAddressFlag = guildServiceGetAccountPortfolioFlags.String("injective-address", "REQUIRED", "")

		guildServiceGetAccountPortfoliosFlags                = flag.NewFlagSet("get-account-portfolios", flag.ExitOnError)
		guildServiceGetAccountPortfoliosGuildIDFlag          = guildServiceGetAccountPortfoliosFlags.String("guild-id", "REQUIRED", "")
		guildServiceGetAccountPortfoliosInjectiveAddressFlag = guildServiceGetAccountPortfoliosFlags.String("injective-address", "REQUIRED", "")
	)
	guildServiceFlags.Usage = guildServiceUsage
	guildServiceGetAllGuildsFlags.Usage = guildServiceGetAllGuildsUsage
	guildServiceGetSingleGuildFlags.Usage = guildServiceGetSingleGuildUsage
	guildServiceGetGuildMembersFlags.Usage = guildServiceGetGuildMembersUsage
	guildServiceGetGuildMasterAddressFlags.Usage = guildServiceGetGuildMasterAddressUsage
	guildServiceGetGuildDefaultMemberFlags.Usage = guildServiceGetGuildDefaultMemberUsage
	guildServiceEnterGuildFlags.Usage = guildServiceEnterGuildUsage
	guildServiceLeaveGuildFlags.Usage = guildServiceLeaveGuildUsage
	guildServiceGetGuildMarketsFlags.Usage = guildServiceGetGuildMarketsUsage
	guildServiceGetAccountPortfolioFlags.Usage = guildServiceGetAccountPortfolioUsage
	guildServiceGetAccountPortfoliosFlags.Usage = guildServiceGetAccountPortfoliosUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "guild-service":
			svcf = guildServiceFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "guild-service":
			switch epn {
			case "get-all-guilds":
				epf = guildServiceGetAllGuildsFlags

			case "get-single-guild":
				epf = guildServiceGetSingleGuildFlags

			case "get-guild-members":
				epf = guildServiceGetGuildMembersFlags

			case "get-guild-master-address":
				epf = guildServiceGetGuildMasterAddressFlags

			case "get-guild-default-member":
				epf = guildServiceGetGuildDefaultMemberFlags

			case "enter-guild":
				epf = guildServiceEnterGuildFlags

			case "leave-guild":
				epf = guildServiceLeaveGuildFlags

			case "get-guild-markets":
				epf = guildServiceGetGuildMarketsFlags

			case "get-account-portfolio":
				epf = guildServiceGetAccountPortfolioFlags

			case "get-account-portfolios":
				epf = guildServiceGetAccountPortfoliosFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "guild-service":
			c := guildservicec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-all-guilds":
				endpoint = c.GetAllGuilds()
				data = nil
			case "get-single-guild":
				endpoint = c.GetSingleGuild()
				data, err = guildservicec.BuildGetSingleGuildPayload(*guildServiceGetSingleGuildGuildIDFlag)
			case "get-guild-members":
				endpoint = c.GetGuildMembers()
				data, err = guildservicec.BuildGetGuildMembersPayload(*guildServiceGetGuildMembersGuildIDFlag)
			case "get-guild-master-address":
				endpoint = c.GetGuildMasterAddress()
				data, err = guildservicec.BuildGetGuildMasterAddressPayload(*guildServiceGetGuildMasterAddressGuildIDFlag)
			case "get-guild-default-member":
				endpoint = c.GetGuildDefaultMember()
				data, err = guildservicec.BuildGetGuildDefaultMemberPayload(*guildServiceGetGuildDefaultMemberGuildIDFlag)
			case "enter-guild":
				endpoint = c.EnterGuild()
				data, err = guildservicec.BuildEnterGuildPayload(*guildServiceEnterGuildBodyFlag, *guildServiceEnterGuildGuildIDFlag)
			case "leave-guild":
				endpoint = c.LeaveGuild()
				data, err = guildservicec.BuildLeaveGuildPayload(*guildServiceLeaveGuildBodyFlag, *guildServiceLeaveGuildGuildIDFlag)
			case "get-guild-markets":
				endpoint = c.GetGuildMarkets()
				data, err = guildservicec.BuildGetGuildMarketsPayload(*guildServiceGetGuildMarketsGuildIDFlag)
			case "get-account-portfolio":
				endpoint = c.GetAccountPortfolio()
				data, err = guildservicec.BuildGetAccountPortfolioPayload(*guildServiceGetAccountPortfolioGuildIDFlag, *guildServiceGetAccountPortfolioInjectiveAddressFlag)
			case "get-account-portfolios":
				endpoint = c.GetAccountPortfolios()
				data, err = guildservicec.BuildGetAccountPortfoliosPayload(*guildServiceGetAccountPortfoliosGuildIDFlag, *guildServiceGetAccountPortfoliosInjectiveAddressFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// guild-serviceUsage displays the usage of the guild-service command and its
// subcommands.
func guildServiceUsage() {
	fmt.Fprintf(os.Stderr, `Service supports trading guild queries
Usage:
    %[1]s [globalflags] guild-service COMMAND [flags]

COMMAND:
    get-all-guilds: Get all guilds
    get-single-guild: Get a single guild
    get-guild-members: Get members
    get-guild-master-address: Get master address of given guild
    get-guild-default-member: GetGuildDefaultMember implements GetGuildDefaultMember.
    enter-guild: EnterGuild implements EnterGuild.
    leave-guild: LeaveGuild implements LeaveGuild.
    get-guild-markets: GetGuildMarkets implements GetGuildMarkets.
    get-account-portfolio: GetAccountPortfolio implements GetAccountPortfolio.
    get-account-portfolios: GetAccountPortfolios implements GetAccountPortfolios.

Additional help:
    %[1]s guild-service COMMAND --help
`, os.Args[0])
}
func guildServiceGetAllGuildsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] guild-service get-all-guilds

Get all guilds

Example:
    %[1]s guild-service get-all-guilds
`, os.Args[0])
}

func guildServiceGetSingleGuildUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] guild-service get-single-guild -guild-id STRING

Get a single guild
    -guild-id STRING: 

Example:
    %[1]s guild-service get-single-guild --guild-id "Alias at magnam ut magnam."
`, os.Args[0])
}

func guildServiceGetGuildMembersUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] guild-service get-guild-members -guild-id STRING

Get members
    -guild-id STRING: 

Example:
    %[1]s guild-service get-guild-members --guild-id "Iste eaque nesciunt."
`, os.Args[0])
}

func guildServiceGetGuildMasterAddressUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] guild-service get-guild-master-address -guild-id STRING

Get master address of given guild
    -guild-id STRING: 

Example:
    %[1]s guild-service get-guild-master-address --guild-id "Labore incidunt molestiae cum error voluptatem."
`, os.Args[0])
}

func guildServiceGetGuildDefaultMemberUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] guild-service get-guild-default-member -guild-id STRING

GetGuildDefaultMember implements GetGuildDefaultMember.
    -guild-id STRING: 

Example:
    %[1]s guild-service get-guild-default-member --guild-id "Molestias iusto."
`, os.Args[0])
}

func guildServiceEnterGuildUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] guild-service enter-guild -body JSON -guild-id STRING

EnterGuild implements EnterGuild.
    -body JSON: 
    -guild-id STRING: 

Example:
    %[1]s guild-service enter-guild --body '{
      "message": "Magnam dolorem nostrum velit non ipsa.",
      "public_key": "Nulla et ipsum autem inventore sed maxime.",
      "signature": "Autem est sit nesciunt ea et velit."
   }' --guild-id "Aliquam aliquam cum cumque."
`, os.Args[0])
}

func guildServiceLeaveGuildUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] guild-service leave-guild -body JSON -guild-id STRING

LeaveGuild implements LeaveGuild.
    -body JSON: 
    -guild-id STRING: 

Example:
    %[1]s guild-service leave-guild --body '{
      "message": "Laboriosam occaecati deleniti dolor.",
      "public_key": "Velit sit rerum inventore ut.",
      "signature": "Cupiditate qui ab accusantium modi alias officiis."
   }' --guild-id "Reprehenderit quos aut omnis quia omnis."
`, os.Args[0])
}

func guildServiceGetGuildMarketsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] guild-service get-guild-markets -guild-id STRING

GetGuildMarkets implements GetGuildMarkets.
    -guild-id STRING: 

Example:
    %[1]s guild-service get-guild-markets --guild-id "Ratione molestiae et."
`, os.Args[0])
}

func guildServiceGetAccountPortfolioUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] guild-service get-account-portfolio -guild-id STRING -injective-address STRING

GetAccountPortfolio implements GetAccountPortfolio.
    -guild-id STRING: 
    -injective-address STRING: 

Example:
    %[1]s guild-service get-account-portfolio --guild-id "Nesciunt ea nesciunt magni sed sunt ut." --injective-address "Perferendis assumenda."
`, os.Args[0])
}

func guildServiceGetAccountPortfoliosUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] guild-service get-account-portfolios -guild-id STRING -injective-address STRING

GetAccountPortfolios implements GetAccountPortfolios.
    -guild-id STRING: 
    -injective-address STRING: 

Example:
    %[1]s guild-service get-account-portfolios --guild-id "Perferendis impedit voluptate quas." --injective-address "Iste quidem."
`, os.Args[0])
}
