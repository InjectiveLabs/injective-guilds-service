// Code generated by goa v3.6.2, DO NOT EDIT.
//
// GuildsService HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-guilds-service/api/design -o ../

package client

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"

	guildsservice "github.com/InjectiveLabs/injective-guilds-service/api/gen/guilds_service"
	goahttp "goa.design/goa/v3/http"
)

// BuildGetAllGuildsRequest instantiates a HTTP request object with method and
// path set to call the "GuildsService" service "GetAllGuilds" endpoint
func (c *Client) BuildGetAllGuildsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetAllGuildsGuildsServicePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("GuildsService", "GetAllGuilds", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetAllGuildsResponse returns a decoder for responses returned by the
// GuildsService GetAllGuilds endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetAllGuildsResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeGetAllGuildsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetAllGuildsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetAllGuilds", err)
			}
			err = ValidateGetAllGuildsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetAllGuilds", err)
			}
			res := NewGetAllGuildsResultOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetAllGuildsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetAllGuilds", err)
			}
			err = ValidateGetAllGuildsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetAllGuilds", err)
			}
			return nil, NewGetAllGuildsNotFound(&body)
		case http.StatusInternalServerError:
			var (
				body GetAllGuildsInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetAllGuilds", err)
			}
			err = ValidateGetAllGuildsInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetAllGuilds", err)
			}
			return nil, NewGetAllGuildsInternal(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("GuildsService", "GetAllGuilds", resp.StatusCode, string(body))
		}
	}
}

// BuildGetSingleGuildRequest instantiates a HTTP request object with method
// and path set to call the "GuildsService" service "GetSingleGuild" endpoint
func (c *Client) BuildGetSingleGuildRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		guildID string
	)
	{
		p, ok := v.(*guildsservice.GetSingleGuildPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("GuildsService", "GetSingleGuild", "*guildsservice.GetSingleGuildPayload", v)
		}
		guildID = p.GuildID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetSingleGuildGuildsServicePath(guildID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("GuildsService", "GetSingleGuild", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetSingleGuildResponse returns a decoder for responses returned by the
// GuildsService GetSingleGuild endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetSingleGuildResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeGetSingleGuildResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetSingleGuildResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetSingleGuild", err)
			}
			err = ValidateGetSingleGuildResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetSingleGuild", err)
			}
			res := NewGetSingleGuildResultOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetSingleGuildNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetSingleGuild", err)
			}
			err = ValidateGetSingleGuildNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetSingleGuild", err)
			}
			return nil, NewGetSingleGuildNotFound(&body)
		case http.StatusInternalServerError:
			var (
				body GetSingleGuildInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetSingleGuild", err)
			}
			err = ValidateGetSingleGuildInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetSingleGuild", err)
			}
			return nil, NewGetSingleGuildInternal(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("GuildsService", "GetSingleGuild", resp.StatusCode, string(body))
		}
	}
}

// BuildGetGuildMembersRequest instantiates a HTTP request object with method
// and path set to call the "GuildsService" service "GetGuildMembers" endpoint
func (c *Client) BuildGetGuildMembersRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		guildID string
	)
	{
		p, ok := v.(*guildsservice.GetGuildMembersPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("GuildsService", "GetGuildMembers", "*guildsservice.GetGuildMembersPayload", v)
		}
		guildID = p.GuildID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetGuildMembersGuildsServicePath(guildID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("GuildsService", "GetGuildMembers", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetGuildMembersResponse returns a decoder for responses returned by
// the GuildsService GetGuildMembers endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetGuildMembersResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeGetGuildMembersResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetGuildMembersResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetGuildMembers", err)
			}
			err = ValidateGetGuildMembersResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetGuildMembers", err)
			}
			res := NewGetGuildMembersResultOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetGuildMembersNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetGuildMembers", err)
			}
			err = ValidateGetGuildMembersNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetGuildMembers", err)
			}
			return nil, NewGetGuildMembersNotFound(&body)
		case http.StatusInternalServerError:
			var (
				body GetGuildMembersInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetGuildMembers", err)
			}
			err = ValidateGetGuildMembersInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetGuildMembers", err)
			}
			return nil, NewGetGuildMembersInternal(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("GuildsService", "GetGuildMembers", resp.StatusCode, string(body))
		}
	}
}

// BuildGetGuildMasterAddressRequest instantiates a HTTP request object with
// method and path set to call the "GuildsService" service
// "GetGuildMasterAddress" endpoint
func (c *Client) BuildGetGuildMasterAddressRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		guildID string
	)
	{
		p, ok := v.(*guildsservice.GetGuildMasterAddressPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("GuildsService", "GetGuildMasterAddress", "*guildsservice.GetGuildMasterAddressPayload", v)
		}
		guildID = p.GuildID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetGuildMasterAddressGuildsServicePath(guildID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("GuildsService", "GetGuildMasterAddress", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetGuildMasterAddressResponse returns a decoder for responses returned
// by the GuildsService GetGuildMasterAddress endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeGetGuildMasterAddressResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeGetGuildMasterAddressResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetGuildMasterAddressResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetGuildMasterAddress", err)
			}
			res := NewGetGuildMasterAddressResultOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetGuildMasterAddressNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetGuildMasterAddress", err)
			}
			err = ValidateGetGuildMasterAddressNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetGuildMasterAddress", err)
			}
			return nil, NewGetGuildMasterAddressNotFound(&body)
		case http.StatusInternalServerError:
			var (
				body GetGuildMasterAddressInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetGuildMasterAddress", err)
			}
			err = ValidateGetGuildMasterAddressInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetGuildMasterAddress", err)
			}
			return nil, NewGetGuildMasterAddressInternal(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("GuildsService", "GetGuildMasterAddress", resp.StatusCode, string(body))
		}
	}
}

// BuildGetGuildDefaultMemberRequest instantiates a HTTP request object with
// method and path set to call the "GuildsService" service
// "GetGuildDefaultMember" endpoint
func (c *Client) BuildGetGuildDefaultMemberRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		guildID string
	)
	{
		p, ok := v.(*guildsservice.GetGuildDefaultMemberPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("GuildsService", "GetGuildDefaultMember", "*guildsservice.GetGuildDefaultMemberPayload", v)
		}
		guildID = p.GuildID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetGuildDefaultMemberGuildsServicePath(guildID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("GuildsService", "GetGuildDefaultMember", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetGuildDefaultMemberResponse returns a decoder for responses returned
// by the GuildsService GetGuildDefaultMember endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeGetGuildDefaultMemberResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeGetGuildDefaultMemberResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetGuildDefaultMemberResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetGuildDefaultMember", err)
			}
			err = ValidateGetGuildDefaultMemberResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetGuildDefaultMember", err)
			}
			res := NewGetGuildDefaultMemberResultOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetGuildDefaultMemberNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetGuildDefaultMember", err)
			}
			err = ValidateGetGuildDefaultMemberNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetGuildDefaultMember", err)
			}
			return nil, NewGetGuildDefaultMemberNotFound(&body)
		case http.StatusInternalServerError:
			var (
				body GetGuildDefaultMemberInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetGuildDefaultMember", err)
			}
			err = ValidateGetGuildDefaultMemberInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetGuildDefaultMember", err)
			}
			return nil, NewGetGuildDefaultMemberInternal(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("GuildsService", "GetGuildDefaultMember", resp.StatusCode, string(body))
		}
	}
}

// BuildEnterGuildRequest instantiates a HTTP request object with method and
// path set to call the "GuildsService" service "EnterGuild" endpoint
func (c *Client) BuildEnterGuildRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		guildID string
	)
	{
		p, ok := v.(*guildsservice.EnterGuildPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("GuildsService", "EnterGuild", "*guildsservice.EnterGuildPayload", v)
		}
		guildID = p.GuildID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: EnterGuildGuildsServicePath(guildID)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("GuildsService", "EnterGuild", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeEnterGuildRequest returns an encoder for requests sent to the
// GuildsService EnterGuild server.
func EncodeEnterGuildRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*guildsservice.EnterGuildPayload)
		if !ok {
			return goahttp.ErrInvalidType("GuildsService", "EnterGuild", "*guildsservice.EnterGuildPayload", v)
		}
		body := NewEnterGuildRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("GuildsService", "EnterGuild", err)
		}
		return nil
	}
}

// DecodeEnterGuildResponse returns a decoder for responses returned by the
// GuildsService EnterGuild endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeEnterGuildResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeEnterGuildResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body EnterGuildResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "EnterGuild", err)
			}
			res := NewEnterGuildResultOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body EnterGuildNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "EnterGuild", err)
			}
			err = ValidateEnterGuildNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "EnterGuild", err)
			}
			return nil, NewEnterGuildNotFound(&body)
		case http.StatusInternalServerError:
			var (
				body EnterGuildInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "EnterGuild", err)
			}
			err = ValidateEnterGuildInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "EnterGuild", err)
			}
			return nil, NewEnterGuildInternal(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("GuildsService", "EnterGuild", resp.StatusCode, string(body))
		}
	}
}

// BuildLeaveGuildRequest instantiates a HTTP request object with method and
// path set to call the "GuildsService" service "LeaveGuild" endpoint
func (c *Client) BuildLeaveGuildRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		guildID          string
		injectiveAddress string
	)
	{
		p, ok := v.(*guildsservice.LeaveGuildPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("GuildsService", "LeaveGuild", "*guildsservice.LeaveGuildPayload", v)
		}
		guildID = p.GuildID
		injectiveAddress = p.InjectiveAddress
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LeaveGuildGuildsServicePath(guildID, injectiveAddress)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("GuildsService", "LeaveGuild", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeLeaveGuildResponse returns a decoder for responses returned by the
// GuildsService LeaveGuild endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeLeaveGuildResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeLeaveGuildResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body LeaveGuildResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "LeaveGuild", err)
			}
			res := NewLeaveGuildResultOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body LeaveGuildNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "LeaveGuild", err)
			}
			err = ValidateLeaveGuildNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "LeaveGuild", err)
			}
			return nil, NewLeaveGuildNotFound(&body)
		case http.StatusInternalServerError:
			var (
				body LeaveGuildInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "LeaveGuild", err)
			}
			err = ValidateLeaveGuildInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "LeaveGuild", err)
			}
			return nil, NewLeaveGuildInternal(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("GuildsService", "LeaveGuild", resp.StatusCode, string(body))
		}
	}
}

// BuildGetGuildMarketsRequest instantiates a HTTP request object with method
// and path set to call the "GuildsService" service "GetGuildMarkets" endpoint
func (c *Client) BuildGetGuildMarketsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		guildID string
	)
	{
		p, ok := v.(*guildsservice.GetGuildMarketsPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("GuildsService", "GetGuildMarkets", "*guildsservice.GetGuildMarketsPayload", v)
		}
		guildID = p.GuildID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetGuildMarketsGuildsServicePath(guildID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("GuildsService", "GetGuildMarkets", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetGuildMarketsResponse returns a decoder for responses returned by
// the GuildsService GetGuildMarkets endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetGuildMarketsResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeGetGuildMarketsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetGuildMarketsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetGuildMarkets", err)
			}
			err = ValidateGetGuildMarketsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetGuildMarkets", err)
			}
			res := NewGetGuildMarketsResultOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetGuildMarketsNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetGuildMarkets", err)
			}
			err = ValidateGetGuildMarketsNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetGuildMarkets", err)
			}
			return nil, NewGetGuildMarketsNotFound(&body)
		case http.StatusInternalServerError:
			var (
				body GetGuildMarketsInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetGuildMarkets", err)
			}
			err = ValidateGetGuildMarketsInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetGuildMarkets", err)
			}
			return nil, NewGetGuildMarketsInternal(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("GuildsService", "GetGuildMarkets", resp.StatusCode, string(body))
		}
	}
}

// BuildGetGuildPortfoliosRequest instantiates a HTTP request object with
// method and path set to call the "GuildsService" service "GetGuildPortfolios"
// endpoint
func (c *Client) BuildGetGuildPortfoliosRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		guildID string
	)
	{
		p, ok := v.(*guildsservice.GetGuildPortfoliosPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("GuildsService", "GetGuildPortfolios", "*guildsservice.GetGuildPortfoliosPayload", v)
		}
		guildID = p.GuildID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetGuildPortfoliosGuildsServicePath(guildID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("GuildsService", "GetGuildPortfolios", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetGuildPortfoliosRequest returns an encoder for requests sent to the
// GuildsService GetGuildPortfolios server.
func EncodeGetGuildPortfoliosRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*guildsservice.GetGuildPortfoliosPayload)
		if !ok {
			return goahttp.ErrInvalidType("GuildsService", "GetGuildPortfolios", "*guildsservice.GetGuildPortfoliosPayload", v)
		}
		values := req.URL.Query()
		if p.StartTime != nil {
			values.Add("start_time", fmt.Sprintf("%v", *p.StartTime))
		}
		if p.EndTime != nil {
			values.Add("end_time", fmt.Sprintf("%v", *p.EndTime))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetGuildPortfoliosResponse returns a decoder for responses returned by
// the GuildsService GetGuildPortfolios endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeGetGuildPortfoliosResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeGetGuildPortfoliosResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetGuildPortfoliosResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetGuildPortfolios", err)
			}
			err = ValidateGetGuildPortfoliosResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetGuildPortfolios", err)
			}
			res := NewGetGuildPortfoliosResultOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetGuildPortfoliosNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetGuildPortfolios", err)
			}
			err = ValidateGetGuildPortfoliosNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetGuildPortfolios", err)
			}
			return nil, NewGetGuildPortfoliosNotFound(&body)
		case http.StatusInternalServerError:
			var (
				body GetGuildPortfoliosInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetGuildPortfolios", err)
			}
			err = ValidateGetGuildPortfoliosInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetGuildPortfolios", err)
			}
			return nil, NewGetGuildPortfoliosInternal(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("GuildsService", "GetGuildPortfolios", resp.StatusCode, string(body))
		}
	}
}

// BuildGetAccountInfoRequest instantiates a HTTP request object with method
// and path set to call the "GuildsService" service "GetAccountInfo" endpoint
func (c *Client) BuildGetAccountInfoRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		injectiveAddress string
	)
	{
		p, ok := v.(*guildsservice.GetAccountInfoPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("GuildsService", "GetAccountInfo", "*guildsservice.GetAccountInfoPayload", v)
		}
		injectiveAddress = p.InjectiveAddress
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetAccountInfoGuildsServicePath(injectiveAddress)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("GuildsService", "GetAccountInfo", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetAccountInfoResponse returns a decoder for responses returned by the
// GuildsService GetAccountInfo endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetAccountInfoResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeGetAccountInfoResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetAccountInfoResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetAccountInfo", err)
			}
			err = ValidateGetAccountInfoResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetAccountInfo", err)
			}
			res := NewGetAccountInfoResultOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetAccountInfoNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetAccountInfo", err)
			}
			err = ValidateGetAccountInfoNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetAccountInfo", err)
			}
			return nil, NewGetAccountInfoNotFound(&body)
		case http.StatusInternalServerError:
			var (
				body GetAccountInfoInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetAccountInfo", err)
			}
			err = ValidateGetAccountInfoInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetAccountInfo", err)
			}
			return nil, NewGetAccountInfoInternal(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("GuildsService", "GetAccountInfo", resp.StatusCode, string(body))
		}
	}
}

// BuildGetAccountPortfolioRequest instantiates a HTTP request object with
// method and path set to call the "GuildsService" service
// "GetAccountPortfolio" endpoint
func (c *Client) BuildGetAccountPortfolioRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		injectiveAddress string
	)
	{
		p, ok := v.(*guildsservice.GetAccountPortfolioPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("GuildsService", "GetAccountPortfolio", "*guildsservice.GetAccountPortfolioPayload", v)
		}
		injectiveAddress = p.InjectiveAddress
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetAccountPortfolioGuildsServicePath(injectiveAddress)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("GuildsService", "GetAccountPortfolio", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetAccountPortfolioResponse returns a decoder for responses returned
// by the GuildsService GetAccountPortfolio endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeGetAccountPortfolioResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeGetAccountPortfolioResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetAccountPortfolioResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetAccountPortfolio", err)
			}
			err = ValidateGetAccountPortfolioResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetAccountPortfolio", err)
			}
			res := NewGetAccountPortfolioResultOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetAccountPortfolioNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetAccountPortfolio", err)
			}
			err = ValidateGetAccountPortfolioNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetAccountPortfolio", err)
			}
			return nil, NewGetAccountPortfolioNotFound(&body)
		case http.StatusInternalServerError:
			var (
				body GetAccountPortfolioInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetAccountPortfolio", err)
			}
			err = ValidateGetAccountPortfolioInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetAccountPortfolio", err)
			}
			return nil, NewGetAccountPortfolioInternal(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("GuildsService", "GetAccountPortfolio", resp.StatusCode, string(body))
		}
	}
}

// BuildGetAccountPortfoliosRequest instantiates a HTTP request object with
// method and path set to call the "GuildsService" service
// "GetAccountPortfolios" endpoint
func (c *Client) BuildGetAccountPortfoliosRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		injectiveAddress string
	)
	{
		p, ok := v.(*guildsservice.GetAccountPortfoliosPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("GuildsService", "GetAccountPortfolios", "*guildsservice.GetAccountPortfoliosPayload", v)
		}
		injectiveAddress = p.InjectiveAddress
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetAccountPortfoliosGuildsServicePath(injectiveAddress)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("GuildsService", "GetAccountPortfolios", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetAccountPortfoliosRequest returns an encoder for requests sent to
// the GuildsService GetAccountPortfolios server.
func EncodeGetAccountPortfoliosRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*guildsservice.GetAccountPortfoliosPayload)
		if !ok {
			return goahttp.ErrInvalidType("GuildsService", "GetAccountPortfolios", "*guildsservice.GetAccountPortfoliosPayload", v)
		}
		values := req.URL.Query()
		if p.StartTime != nil {
			values.Add("start_time", fmt.Sprintf("%v", *p.StartTime))
		}
		if p.EndTime != nil {
			values.Add("end_time", fmt.Sprintf("%v", *p.EndTime))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetAccountPortfoliosResponse returns a decoder for responses returned
// by the GuildsService GetAccountPortfolios endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeGetAccountPortfoliosResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeGetAccountPortfoliosResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetAccountPortfoliosResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetAccountPortfolios", err)
			}
			err = ValidateGetAccountPortfoliosResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetAccountPortfolios", err)
			}
			res := NewGetAccountPortfoliosResultOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetAccountPortfoliosNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetAccountPortfolios", err)
			}
			err = ValidateGetAccountPortfoliosNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetAccountPortfolios", err)
			}
			return nil, NewGetAccountPortfoliosNotFound(&body)
		case http.StatusInternalServerError:
			var (
				body GetAccountPortfoliosInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetAccountPortfolios", err)
			}
			err = ValidateGetAccountPortfoliosInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetAccountPortfolios", err)
			}
			return nil, NewGetAccountPortfoliosInternal(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("GuildsService", "GetAccountPortfolios", resp.StatusCode, string(body))
		}
	}
}

// BuildGetAccountMonthlyPortfoliosRequest instantiates a HTTP request object
// with method and path set to call the "GuildsService" service
// "GetAccountMonthlyPortfolios" endpoint
func (c *Client) BuildGetAccountMonthlyPortfoliosRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		injectiveAddress string
	)
	{
		p, ok := v.(*guildsservice.GetAccountMonthlyPortfoliosPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("GuildsService", "GetAccountMonthlyPortfolios", "*guildsservice.GetAccountMonthlyPortfoliosPayload", v)
		}
		injectiveAddress = p.InjectiveAddress
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetAccountMonthlyPortfoliosGuildsServicePath(injectiveAddress)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("GuildsService", "GetAccountMonthlyPortfolios", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetAccountMonthlyPortfoliosRequest returns an encoder for requests
// sent to the GuildsService GetAccountMonthlyPortfolios server.
func EncodeGetAccountMonthlyPortfoliosRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*guildsservice.GetAccountMonthlyPortfoliosPayload)
		if !ok {
			return goahttp.ErrInvalidType("GuildsService", "GetAccountMonthlyPortfolios", "*guildsservice.GetAccountMonthlyPortfoliosPayload", v)
		}
		values := req.URL.Query()
		if p.StartTime != nil {
			values.Add("start_time", fmt.Sprintf("%v", *p.StartTime))
		}
		if p.EndTime != nil {
			values.Add("end_time", fmt.Sprintf("%v", *p.EndTime))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetAccountMonthlyPortfoliosResponse returns a decoder for responses
// returned by the GuildsService GetAccountMonthlyPortfolios endpoint.
// restoreBody controls whether the response body should be restored after
// having been read.
// DecodeGetAccountMonthlyPortfoliosResponse may return the following errors:
//	- "not_found" (type *goa.ServiceError): http.StatusNotFound
//	- "internal" (type *goa.ServiceError): http.StatusInternalServerError
//	- error: internal error
func DecodeGetAccountMonthlyPortfoliosResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetAccountMonthlyPortfoliosResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetAccountMonthlyPortfolios", err)
			}
			err = ValidateGetAccountMonthlyPortfoliosResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetAccountMonthlyPortfolios", err)
			}
			res := NewGetAccountMonthlyPortfoliosResultOK(&body)
			return res, nil
		case http.StatusNotFound:
			var (
				body GetAccountMonthlyPortfoliosNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetAccountMonthlyPortfolios", err)
			}
			err = ValidateGetAccountMonthlyPortfoliosNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetAccountMonthlyPortfolios", err)
			}
			return nil, NewGetAccountMonthlyPortfoliosNotFound(&body)
		case http.StatusInternalServerError:
			var (
				body GetAccountMonthlyPortfoliosInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("GuildsService", "GetAccountMonthlyPortfolios", err)
			}
			err = ValidateGetAccountMonthlyPortfoliosInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("GuildsService", "GetAccountMonthlyPortfolios", err)
			}
			return nil, NewGetAccountMonthlyPortfoliosInternal(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("GuildsService", "GetAccountMonthlyPortfolios", resp.StatusCode, string(body))
		}
	}
}

// unmarshalGuildResponseBodyToGuildsserviceGuild builds a value of type
// *guildsservice.Guild from a value of type *GuildResponseBody.
func unmarshalGuildResponseBodyToGuildsserviceGuild(v *GuildResponseBody) *guildsservice.Guild {
	if v == nil {
		return nil
	}
	res := &guildsservice.Guild{
		ID:                   *v.ID,
		Name:                 *v.Name,
		Description:          *v.Description,
		MasterAddress:        *v.MasterAddress,
		StakingRequirement:   *v.StakingRequirement,
		Capacity:             *v.Capacity,
		MemberCount:          *v.MemberCount,
		DefaultMemberAddress: *v.DefaultMemberAddress,
	}
	res.Requirements = make([]*guildsservice.Requirement, len(v.Requirements))
	for i, val := range v.Requirements {
		res.Requirements[i] = unmarshalRequirementResponseBodyToGuildsserviceRequirement(val)
	}
	if v.CurrentPortfolio != nil {
		res.CurrentPortfolio = unmarshalSingleGuildPortfolioResponseBodyToGuildsserviceSingleGuildPortfolio(v.CurrentPortfolio)
	}

	return res
}

// unmarshalRequirementResponseBodyToGuildsserviceRequirement builds a value of
// type *guildsservice.Requirement from a value of type
// *RequirementResponseBody.
func unmarshalRequirementResponseBodyToGuildsserviceRequirement(v *RequirementResponseBody) *guildsservice.Requirement {
	res := &guildsservice.Requirement{
		Denom:        *v.Denom,
		MinAmountUsd: *v.MinAmountUsd,
		MinAmount:    *v.MinAmount,
	}

	return res
}

// unmarshalSingleGuildPortfolioResponseBodyToGuildsserviceSingleGuildPortfolio
// builds a value of type *guildsservice.SingleGuildPortfolio from a value of
// type *SingleGuildPortfolioResponseBody.
func unmarshalSingleGuildPortfolioResponseBodyToGuildsserviceSingleGuildPortfolio(v *SingleGuildPortfolioResponseBody) *guildsservice.SingleGuildPortfolio {
	if v == nil {
		return nil
	}
	res := &guildsservice.SingleGuildPortfolio{
		GuildID:   v.GuildID,
		UpdatedAt: *v.UpdatedAt,
	}
	res.Balances = make([]*guildsservice.Balance, len(v.Balances))
	for i, val := range v.Balances {
		res.Balances[i] = unmarshalBalanceResponseBodyToGuildsserviceBalance(val)
	}

	return res
}

// unmarshalBalanceResponseBodyToGuildsserviceBalance builds a value of type
// *guildsservice.Balance from a value of type *BalanceResponseBody.
func unmarshalBalanceResponseBodyToGuildsserviceBalance(v *BalanceResponseBody) *guildsservice.Balance {
	res := &guildsservice.Balance{
		Denom:            *v.Denom,
		TotalBalance:     *v.TotalBalance,
		AvailableBalance: *v.AvailableBalance,
		UnrealizedPnl:    *v.UnrealizedPnl,
		MarginHold:       *v.MarginHold,
		PriceUsd:         *v.PriceUsd,
	}

	return res
}

// unmarshalGuildMemberResponseBodyToGuildsserviceGuildMember builds a value of
// type *guildsservice.GuildMember from a value of type
// *GuildMemberResponseBody.
func unmarshalGuildMemberResponseBodyToGuildsserviceGuildMember(v *GuildMemberResponseBody) *guildsservice.GuildMember {
	if v == nil {
		return nil
	}
	res := &guildsservice.GuildMember{
		InjectiveAddress:     *v.InjectiveAddress,
		IsDefaultGuildMember: *v.IsDefaultGuildMember,
		Since:                *v.Since,
		GuildID:              v.GuildID,
		Params:               *v.Params,
	}

	return res
}

// unmarshalMarketResponseBodyToGuildsserviceMarket builds a value of type
// *guildsservice.Market from a value of type *MarketResponseBody.
func unmarshalMarketResponseBodyToGuildsserviceMarket(v *MarketResponseBody) *guildsservice.Market {
	if v == nil {
		return nil
	}
	res := &guildsservice.Market{
		MarketID:    *v.MarketID,
		IsPerpetual: *v.IsPerpetual,
	}

	return res
}

// unmarshalSingleAccountPortfolioResponseBodyToGuildsserviceSingleAccountPortfolio
// builds a value of type *guildsservice.SingleAccountPortfolio from a value of
// type *SingleAccountPortfolioResponseBody.
func unmarshalSingleAccountPortfolioResponseBodyToGuildsserviceSingleAccountPortfolio(v *SingleAccountPortfolioResponseBody) *guildsservice.SingleAccountPortfolio {
	if v == nil {
		return nil
	}
	res := &guildsservice.SingleAccountPortfolio{
		InjectiveAddress: *v.InjectiveAddress,
		UpdatedAt:        *v.UpdatedAt,
	}
	res.Balances = make([]*guildsservice.Balance, len(v.Balances))
	for i, val := range v.Balances {
		res.Balances[i] = unmarshalBalanceResponseBodyToGuildsserviceBalance(val)
	}

	return res
}

// unmarshalMonthlyAccountPortfolioResponseBodyToGuildsserviceMonthlyAccountPortfolio
// builds a value of type *guildsservice.MonthlyAccountPortfolio from a value
// of type *MonthlyAccountPortfolioResponseBody.
func unmarshalMonthlyAccountPortfolioResponseBodyToGuildsserviceMonthlyAccountPortfolio(v *MonthlyAccountPortfolioResponseBody) *guildsservice.MonthlyAccountPortfolio {
	if v == nil {
		return nil
	}
	res := &guildsservice.MonthlyAccountPortfolio{
		Time: *v.Time,
	}
	res.BeginSnapshot = unmarshalSingleAccountPortfolioResponseBodyToGuildsserviceSingleAccountPortfolio(v.BeginSnapshot)
	res.EndSnapshot = unmarshalSingleAccountPortfolioResponseBodyToGuildsserviceSingleAccountPortfolio(v.EndSnapshot)

	return res
}
