// Code generated by goa v3.6.2, DO NOT EDIT.
//
// GuildsService HTTP client types
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-guilds-service/api/design -o ../

package client

import (
	guildsservice "github.com/InjectiveLabs/injective-guilds-service/api/gen/guilds_service"
	goa "goa.design/goa/v3/pkg"
)

// EnterGuildRequestBody is the type of the "GuildsService" service
// "EnterGuild" endpoint HTTP request body.
type EnterGuildRequestBody struct {
	PublicKey string `form:"public_key" json:"public_key" xml:"public_key"`
	// Supply base64 json encoded string cointaining {"action": "enter-guild",
	// "expired_at": unixTimestamp }
	Message   string `form:"message" json:"message" xml:"message"`
	Signature string `form:"signature" json:"signature" xml:"signature"`
}

// LeaveGuildRequestBody is the type of the "GuildsService" service
// "LeaveGuild" endpoint HTTP request body.
type LeaveGuildRequestBody struct {
	PublicKey string `form:"public_key" json:"public_key" xml:"public_key"`
	// Supply base64 json encoded string cointaining {"action": "leave-guild",
	// "expired_at": unixTimestamp}
	Message   string `form:"message" json:"message" xml:"message"`
	Signature string `form:"signature" json:"signature" xml:"signature"`
}

// GetAllGuildsResponseBody is the type of the "GuildsService" service
// "GetAllGuilds" endpoint HTTP response body.
type GetAllGuildsResponseBody struct {
	// Existing guilds
	Guilds []*GuildResponseBody `form:"guilds,omitempty" json:"guilds,omitempty" xml:"guilds,omitempty"`
}

// GetSingleGuildResponseBody is the type of the "GuildsService" service
// "GetSingleGuild" endpoint HTTP response body.
type GetSingleGuildResponseBody struct {
	// Existing guilds
	Guild *GuildResponseBody `form:"guild,omitempty" json:"guild,omitempty" xml:"guild,omitempty"`
}

// GetGuildMembersResponseBody is the type of the "GuildsService" service
// "GetGuildMembers" endpoint HTTP response body.
type GetGuildMembersResponseBody struct {
	// Member of given guild
	Members []*GuildMemberResponseBody `form:"members,omitempty" json:"members,omitempty" xml:"members,omitempty"`
}

// GetGuildMasterAddressResponseBody is the type of the "GuildsService" service
// "GetGuildMasterAddress" endpoint HTTP response body.
type GetGuildMasterAddressResponseBody struct {
	MasterAddress *string `form:"master_address,omitempty" json:"master_address,omitempty" xml:"master_address,omitempty"`
}

// GetGuildDefaultMemberResponseBody is the type of the "GuildsService" service
// "GetGuildDefaultMember" endpoint HTTP response body.
type GetGuildDefaultMemberResponseBody struct {
	DefaultMember *GuildMemberResponseBody `form:"default_member,omitempty" json:"default_member,omitempty" xml:"default_member,omitempty"`
}

// EnterGuildResponseBody is the type of the "GuildsService" service
// "EnterGuild" endpoint HTTP response body.
type EnterGuildResponseBody struct {
	JoinStatus *string `form:"join_status,omitempty" json:"join_status,omitempty" xml:"join_status,omitempty"`
}

// LeaveGuildResponseBody is the type of the "GuildsService" service
// "LeaveGuild" endpoint HTTP response body.
type LeaveGuildResponseBody struct {
	LeaveStatus *string `form:"leave_status,omitempty" json:"leave_status,omitempty" xml:"leave_status,omitempty"`
}

// GetGuildMarketsResponseBody is the type of the "GuildsService" service
// "GetGuildMarkets" endpoint HTTP response body.
type GetGuildMarketsResponseBody struct {
	Markets []*MarketResponseBody `form:"markets,omitempty" json:"markets,omitempty" xml:"markets,omitempty"`
}

// GetGuildPortfoliosResponseBody is the type of the "GuildsService" service
// "GetGuildPortfolios" endpoint HTTP response body.
type GetGuildPortfoliosResponseBody struct {
	Portfolios []*SingleGuildPortfolioResponseBody `form:"portfolios,omitempty" json:"portfolios,omitempty" xml:"portfolios,omitempty"`
}

// GetAccountPortfolioResponseBody is the type of the "GuildsService" service
// "GetAccountPortfolio" endpoint HTTP response body.
type GetAccountPortfolioResponseBody struct {
	Data *SingleAccountPortfolioResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// GetAccountPortfoliosResponseBody is the type of the "GuildsService" service
// "GetAccountPortfolios" endpoint HTTP response body.
type GetAccountPortfoliosResponseBody struct {
	Portfolios []*SingleAccountPortfolioResponseBody `form:"portfolios,omitempty" json:"portfolios,omitempty" xml:"portfolios,omitempty"`
}

// GetAllGuildsNotFoundResponseBody is the type of the "GuildsService" service
// "GetAllGuilds" endpoint HTTP response body for the "not_found" error.
type GetAllGuildsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetAllGuildsInternalResponseBody is the type of the "GuildsService" service
// "GetAllGuilds" endpoint HTTP response body for the "internal" error.
type GetAllGuildsInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetSingleGuildNotFoundResponseBody is the type of the "GuildsService"
// service "GetSingleGuild" endpoint HTTP response body for the "not_found"
// error.
type GetSingleGuildNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetSingleGuildInternalResponseBody is the type of the "GuildsService"
// service "GetSingleGuild" endpoint HTTP response body for the "internal"
// error.
type GetSingleGuildInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetGuildMembersNotFoundResponseBody is the type of the "GuildsService"
// service "GetGuildMembers" endpoint HTTP response body for the "not_found"
// error.
type GetGuildMembersNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetGuildMembersInternalResponseBody is the type of the "GuildsService"
// service "GetGuildMembers" endpoint HTTP response body for the "internal"
// error.
type GetGuildMembersInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetGuildMasterAddressNotFoundResponseBody is the type of the "GuildsService"
// service "GetGuildMasterAddress" endpoint HTTP response body for the
// "not_found" error.
type GetGuildMasterAddressNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetGuildMasterAddressInternalResponseBody is the type of the "GuildsService"
// service "GetGuildMasterAddress" endpoint HTTP response body for the
// "internal" error.
type GetGuildMasterAddressInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetGuildDefaultMemberNotFoundResponseBody is the type of the "GuildsService"
// service "GetGuildDefaultMember" endpoint HTTP response body for the
// "not_found" error.
type GetGuildDefaultMemberNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetGuildDefaultMemberInternalResponseBody is the type of the "GuildsService"
// service "GetGuildDefaultMember" endpoint HTTP response body for the
// "internal" error.
type GetGuildDefaultMemberInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// EnterGuildNotFoundResponseBody is the type of the "GuildsService" service
// "EnterGuild" endpoint HTTP response body for the "not_found" error.
type EnterGuildNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// EnterGuildInternalResponseBody is the type of the "GuildsService" service
// "EnterGuild" endpoint HTTP response body for the "internal" error.
type EnterGuildInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// LeaveGuildNotFoundResponseBody is the type of the "GuildsService" service
// "LeaveGuild" endpoint HTTP response body for the "not_found" error.
type LeaveGuildNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// LeaveGuildInternalResponseBody is the type of the "GuildsService" service
// "LeaveGuild" endpoint HTTP response body for the "internal" error.
type LeaveGuildInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetGuildMarketsNotFoundResponseBody is the type of the "GuildsService"
// service "GetGuildMarkets" endpoint HTTP response body for the "not_found"
// error.
type GetGuildMarketsNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetGuildMarketsInternalResponseBody is the type of the "GuildsService"
// service "GetGuildMarkets" endpoint HTTP response body for the "internal"
// error.
type GetGuildMarketsInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetGuildPortfoliosNotFoundResponseBody is the type of the "GuildsService"
// service "GetGuildPortfolios" endpoint HTTP response body for the "not_found"
// error.
type GetGuildPortfoliosNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetGuildPortfoliosInternalResponseBody is the type of the "GuildsService"
// service "GetGuildPortfolios" endpoint HTTP response body for the "internal"
// error.
type GetGuildPortfoliosInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetAccountPortfolioNotFoundResponseBody is the type of the "GuildsService"
// service "GetAccountPortfolio" endpoint HTTP response body for the
// "not_found" error.
type GetAccountPortfolioNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetAccountPortfolioInternalResponseBody is the type of the "GuildsService"
// service "GetAccountPortfolio" endpoint HTTP response body for the "internal"
// error.
type GetAccountPortfolioInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetAccountPortfoliosNotFoundResponseBody is the type of the "GuildsService"
// service "GetAccountPortfolios" endpoint HTTP response body for the
// "not_found" error.
type GetAccountPortfoliosNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetAccountPortfoliosInternalResponseBody is the type of the "GuildsService"
// service "GetAccountPortfolios" endpoint HTTP response body for the
// "internal" error.
type GetAccountPortfoliosInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GuildResponseBody is used to define fields on response body types.
type GuildResponseBody struct {
	ID                 *string                           `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name               *string                           `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Description        *string                           `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	MasterAddress      *string                           `form:"master_address,omitempty" json:"master_address,omitempty" xml:"master_address,omitempty"`
	Requirements       []*RequirementResponseBody        `form:"requirements,omitempty" json:"requirements,omitempty" xml:"requirements,omitempty"`
	StakingRequirement *string                           `form:"staking_requirement,omitempty" json:"staking_requirement,omitempty" xml:"staking_requirement,omitempty"`
	Capacity           *int                              `form:"capacity,omitempty" json:"capacity,omitempty" xml:"capacity,omitempty"`
	MemberCount        *int                              `form:"member_count,omitempty" json:"member_count,omitempty" xml:"member_count,omitempty"`
	CurrentPortfolio   *SingleGuildPortfolioResponseBody `form:"current_portfolio,omitempty" json:"current_portfolio,omitempty" xml:"current_portfolio,omitempty"`
}

// RequirementResponseBody is used to define fields on response body types.
type RequirementResponseBody struct {
	Denom        *string  `form:"denom,omitempty" json:"denom,omitempty" xml:"denom,omitempty"`
	MinAmountUsd *float64 `form:"min_amount_usd,omitempty" json:"min_amount_usd,omitempty" xml:"min_amount_usd,omitempty"`
}

// SingleGuildPortfolioResponseBody is used to define fields on response body
// types.
type SingleGuildPortfolioResponseBody struct {
	GuildID   *string                `form:"guild_id,omitempty" json:"guild_id,omitempty" xml:"guild_id,omitempty"`
	Balances  []*BalanceResponseBody `form:"balances,omitempty" json:"balances,omitempty" xml:"balances,omitempty"`
	UpdatedAt *int64                 `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// BalanceResponseBody is used to define fields on response body types.
type BalanceResponseBody struct {
	Denom            *string  `form:"denom,omitempty" json:"denom,omitempty" xml:"denom,omitempty"`
	TotalBalance     *string  `form:"total_balance,omitempty" json:"total_balance,omitempty" xml:"total_balance,omitempty"`
	AvailableBalance *string  `form:"available_balance,omitempty" json:"available_balance,omitempty" xml:"available_balance,omitempty"`
	UnrealizedPnl    *string  `form:"unrealized_pnl,omitempty" json:"unrealized_pnl,omitempty" xml:"unrealized_pnl,omitempty"`
	MarginHold       *string  `form:"margin_hold,omitempty" json:"margin_hold,omitempty" xml:"margin_hold,omitempty"`
	PriceUsd         *float64 `form:"price_usd,omitempty" json:"price_usd,omitempty" xml:"price_usd,omitempty"`
}

// GuildMemberResponseBody is used to define fields on response body types.
type GuildMemberResponseBody struct {
	InjectiveAddress     *string `form:"injective_address,omitempty" json:"injective_address,omitempty" xml:"injective_address,omitempty"`
	IsDefaultGuildMember *bool   `form:"is_default_guild_member,omitempty" json:"is_default_guild_member,omitempty" xml:"is_default_guild_member,omitempty"`
	Since                *int64  `form:"since,omitempty" json:"since,omitempty" xml:"since,omitempty"`
}

// MarketResponseBody is used to define fields on response body types.
type MarketResponseBody struct {
	MarketID    *string `form:"market_id,omitempty" json:"market_id,omitempty" xml:"market_id,omitempty"`
	IsPerpetual *bool   `form:"is_perpetual,omitempty" json:"is_perpetual,omitempty" xml:"is_perpetual,omitempty"`
}

// SingleAccountPortfolioResponseBody is used to define fields on response body
// types.
type SingleAccountPortfolioResponseBody struct {
	InjectiveAddress *string                `form:"injective_address,omitempty" json:"injective_address,omitempty" xml:"injective_address,omitempty"`
	Balances         []*BalanceResponseBody `form:"balances,omitempty" json:"balances,omitempty" xml:"balances,omitempty"`
	UpdatedAt        *int64                 `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// NewEnterGuildRequestBody builds the HTTP request body from the payload of
// the "EnterGuild" endpoint of the "GuildsService" service.
func NewEnterGuildRequestBody(p *guildsservice.EnterGuildPayload) *EnterGuildRequestBody {
	body := &EnterGuildRequestBody{
		PublicKey: p.PublicKey,
		Message:   p.Message,
		Signature: p.Signature,
	}
	return body
}

// NewLeaveGuildRequestBody builds the HTTP request body from the payload of
// the "LeaveGuild" endpoint of the "GuildsService" service.
func NewLeaveGuildRequestBody(p *guildsservice.LeaveGuildPayload) *LeaveGuildRequestBody {
	body := &LeaveGuildRequestBody{
		PublicKey: p.PublicKey,
		Message:   p.Message,
		Signature: p.Signature,
	}
	return body
}

// NewGetAllGuildsResultOK builds a "GuildsService" service "GetAllGuilds"
// endpoint result from a HTTP "OK" response.
func NewGetAllGuildsResultOK(body *GetAllGuildsResponseBody) *guildsservice.GetAllGuildsResult {
	v := &guildsservice.GetAllGuildsResult{}
	if body.Guilds != nil {
		v.Guilds = make([]*guildsservice.Guild, len(body.Guilds))
		for i, val := range body.Guilds {
			v.Guilds[i] = unmarshalGuildResponseBodyToGuildsserviceGuild(val)
		}
	}

	return v
}

// NewGetAllGuildsNotFound builds a GuildsService service GetAllGuilds endpoint
// not_found error.
func NewGetAllGuildsNotFound(body *GetAllGuildsNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetAllGuildsInternal builds a GuildsService service GetAllGuilds endpoint
// internal error.
func NewGetAllGuildsInternal(body *GetAllGuildsInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetSingleGuildResultOK builds a "GuildsService" service "GetSingleGuild"
// endpoint result from a HTTP "OK" response.
func NewGetSingleGuildResultOK(body *GetSingleGuildResponseBody) *guildsservice.GetSingleGuildResult {
	v := &guildsservice.GetSingleGuildResult{}
	if body.Guild != nil {
		v.Guild = unmarshalGuildResponseBodyToGuildsserviceGuild(body.Guild)
	}

	return v
}

// NewGetSingleGuildNotFound builds a GuildsService service GetSingleGuild
// endpoint not_found error.
func NewGetSingleGuildNotFound(body *GetSingleGuildNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetSingleGuildInternal builds a GuildsService service GetSingleGuild
// endpoint internal error.
func NewGetSingleGuildInternal(body *GetSingleGuildInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetGuildMembersResultOK builds a "GuildsService" service
// "GetGuildMembers" endpoint result from a HTTP "OK" response.
func NewGetGuildMembersResultOK(body *GetGuildMembersResponseBody) *guildsservice.GetGuildMembersResult {
	v := &guildsservice.GetGuildMembersResult{}
	if body.Members != nil {
		v.Members = make([]*guildsservice.GuildMember, len(body.Members))
		for i, val := range body.Members {
			v.Members[i] = unmarshalGuildMemberResponseBodyToGuildsserviceGuildMember(val)
		}
	}

	return v
}

// NewGetGuildMembersNotFound builds a GuildsService service GetGuildMembers
// endpoint not_found error.
func NewGetGuildMembersNotFound(body *GetGuildMembersNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetGuildMembersInternal builds a GuildsService service GetGuildMembers
// endpoint internal error.
func NewGetGuildMembersInternal(body *GetGuildMembersInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetGuildMasterAddressResultOK builds a "GuildsService" service
// "GetGuildMasterAddress" endpoint result from a HTTP "OK" response.
func NewGetGuildMasterAddressResultOK(body *GetGuildMasterAddressResponseBody) *guildsservice.GetGuildMasterAddressResult {
	v := &guildsservice.GetGuildMasterAddressResult{
		MasterAddress: body.MasterAddress,
	}

	return v
}

// NewGetGuildMasterAddressNotFound builds a GuildsService service
// GetGuildMasterAddress endpoint not_found error.
func NewGetGuildMasterAddressNotFound(body *GetGuildMasterAddressNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetGuildMasterAddressInternal builds a GuildsService service
// GetGuildMasterAddress endpoint internal error.
func NewGetGuildMasterAddressInternal(body *GetGuildMasterAddressInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetGuildDefaultMemberResultOK builds a "GuildsService" service
// "GetGuildDefaultMember" endpoint result from a HTTP "OK" response.
func NewGetGuildDefaultMemberResultOK(body *GetGuildDefaultMemberResponseBody) *guildsservice.GetGuildDefaultMemberResult {
	v := &guildsservice.GetGuildDefaultMemberResult{}
	if body.DefaultMember != nil {
		v.DefaultMember = unmarshalGuildMemberResponseBodyToGuildsserviceGuildMember(body.DefaultMember)
	}

	return v
}

// NewGetGuildDefaultMemberNotFound builds a GuildsService service
// GetGuildDefaultMember endpoint not_found error.
func NewGetGuildDefaultMemberNotFound(body *GetGuildDefaultMemberNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetGuildDefaultMemberInternal builds a GuildsService service
// GetGuildDefaultMember endpoint internal error.
func NewGetGuildDefaultMemberInternal(body *GetGuildDefaultMemberInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewEnterGuildResultOK builds a "GuildsService" service "EnterGuild" endpoint
// result from a HTTP "OK" response.
func NewEnterGuildResultOK(body *EnterGuildResponseBody) *guildsservice.EnterGuildResult {
	v := &guildsservice.EnterGuildResult{
		JoinStatus: body.JoinStatus,
	}

	return v
}

// NewEnterGuildNotFound builds a GuildsService service EnterGuild endpoint
// not_found error.
func NewEnterGuildNotFound(body *EnterGuildNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewEnterGuildInternal builds a GuildsService service EnterGuild endpoint
// internal error.
func NewEnterGuildInternal(body *EnterGuildInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewLeaveGuildResultOK builds a "GuildsService" service "LeaveGuild" endpoint
// result from a HTTP "OK" response.
func NewLeaveGuildResultOK(body *LeaveGuildResponseBody) *guildsservice.LeaveGuildResult {
	v := &guildsservice.LeaveGuildResult{
		LeaveStatus: body.LeaveStatus,
	}

	return v
}

// NewLeaveGuildNotFound builds a GuildsService service LeaveGuild endpoint
// not_found error.
func NewLeaveGuildNotFound(body *LeaveGuildNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewLeaveGuildInternal builds a GuildsService service LeaveGuild endpoint
// internal error.
func NewLeaveGuildInternal(body *LeaveGuildInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetGuildMarketsResultOK builds a "GuildsService" service
// "GetGuildMarkets" endpoint result from a HTTP "OK" response.
func NewGetGuildMarketsResultOK(body *GetGuildMarketsResponseBody) *guildsservice.GetGuildMarketsResult {
	v := &guildsservice.GetGuildMarketsResult{}
	if body.Markets != nil {
		v.Markets = make([]*guildsservice.Market, len(body.Markets))
		for i, val := range body.Markets {
			v.Markets[i] = unmarshalMarketResponseBodyToGuildsserviceMarket(val)
		}
	}

	return v
}

// NewGetGuildMarketsNotFound builds a GuildsService service GetGuildMarkets
// endpoint not_found error.
func NewGetGuildMarketsNotFound(body *GetGuildMarketsNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetGuildMarketsInternal builds a GuildsService service GetGuildMarkets
// endpoint internal error.
func NewGetGuildMarketsInternal(body *GetGuildMarketsInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetGuildPortfoliosResultOK builds a "GuildsService" service
// "GetGuildPortfolios" endpoint result from a HTTP "OK" response.
func NewGetGuildPortfoliosResultOK(body *GetGuildPortfoliosResponseBody) *guildsservice.GetGuildPortfoliosResult {
	v := &guildsservice.GetGuildPortfoliosResult{}
	if body.Portfolios != nil {
		v.Portfolios = make([]*guildsservice.SingleGuildPortfolio, len(body.Portfolios))
		for i, val := range body.Portfolios {
			v.Portfolios[i] = unmarshalSingleGuildPortfolioResponseBodyToGuildsserviceSingleGuildPortfolio(val)
		}
	}

	return v
}

// NewGetGuildPortfoliosNotFound builds a GuildsService service
// GetGuildPortfolios endpoint not_found error.
func NewGetGuildPortfoliosNotFound(body *GetGuildPortfoliosNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetGuildPortfoliosInternal builds a GuildsService service
// GetGuildPortfolios endpoint internal error.
func NewGetGuildPortfoliosInternal(body *GetGuildPortfoliosInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetAccountPortfolioResultOK builds a "GuildsService" service
// "GetAccountPortfolio" endpoint result from a HTTP "OK" response.
func NewGetAccountPortfolioResultOK(body *GetAccountPortfolioResponseBody) *guildsservice.GetAccountPortfolioResult {
	v := &guildsservice.GetAccountPortfolioResult{}
	if body.Data != nil {
		v.Data = unmarshalSingleAccountPortfolioResponseBodyToGuildsserviceSingleAccountPortfolio(body.Data)
	}

	return v
}

// NewGetAccountPortfolioNotFound builds a GuildsService service
// GetAccountPortfolio endpoint not_found error.
func NewGetAccountPortfolioNotFound(body *GetAccountPortfolioNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetAccountPortfolioInternal builds a GuildsService service
// GetAccountPortfolio endpoint internal error.
func NewGetAccountPortfolioInternal(body *GetAccountPortfolioInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetAccountPortfoliosResultOK builds a "GuildsService" service
// "GetAccountPortfolios" endpoint result from a HTTP "OK" response.
func NewGetAccountPortfoliosResultOK(body *GetAccountPortfoliosResponseBody) *guildsservice.GetAccountPortfoliosResult {
	v := &guildsservice.GetAccountPortfoliosResult{}
	if body.Portfolios != nil {
		v.Portfolios = make([]*guildsservice.SingleAccountPortfolio, len(body.Portfolios))
		for i, val := range body.Portfolios {
			v.Portfolios[i] = unmarshalSingleAccountPortfolioResponseBodyToGuildsserviceSingleAccountPortfolio(val)
		}
	}

	return v
}

// NewGetAccountPortfoliosNotFound builds a GuildsService service
// GetAccountPortfolios endpoint not_found error.
func NewGetAccountPortfoliosNotFound(body *GetAccountPortfoliosNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetAccountPortfoliosInternal builds a GuildsService service
// GetAccountPortfolios endpoint internal error.
func NewGetAccountPortfoliosInternal(body *GetAccountPortfoliosInternalResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateGetAllGuildsResponseBody runs the validations defined on
// GetAllGuildsResponseBody
func ValidateGetAllGuildsResponseBody(body *GetAllGuildsResponseBody) (err error) {
	for _, e := range body.Guilds {
		if e != nil {
			if err2 := ValidateGuildResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetSingleGuildResponseBody runs the validations defined on
// GetSingleGuildResponseBody
func ValidateGetSingleGuildResponseBody(body *GetSingleGuildResponseBody) (err error) {
	if body.Guild != nil {
		if err2 := ValidateGuildResponseBody(body.Guild); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGetGuildMembersResponseBody runs the validations defined on
// GetGuildMembersResponseBody
func ValidateGetGuildMembersResponseBody(body *GetGuildMembersResponseBody) (err error) {
	for _, e := range body.Members {
		if e != nil {
			if err2 := ValidateGuildMemberResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetGuildDefaultMemberResponseBody runs the validations defined on
// GetGuildDefaultMemberResponseBody
func ValidateGetGuildDefaultMemberResponseBody(body *GetGuildDefaultMemberResponseBody) (err error) {
	if body.DefaultMember != nil {
		if err2 := ValidateGuildMemberResponseBody(body.DefaultMember); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGetGuildMarketsResponseBody runs the validations defined on
// GetGuildMarketsResponseBody
func ValidateGetGuildMarketsResponseBody(body *GetGuildMarketsResponseBody) (err error) {
	for _, e := range body.Markets {
		if e != nil {
			if err2 := ValidateMarketResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetGuildPortfoliosResponseBody runs the validations defined on
// GetGuildPortfoliosResponseBody
func ValidateGetGuildPortfoliosResponseBody(body *GetGuildPortfoliosResponseBody) (err error) {
	for _, e := range body.Portfolios {
		if e != nil {
			if err2 := ValidateSingleGuildPortfolioResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetAccountPortfolioResponseBody runs the validations defined on
// GetAccountPortfolioResponseBody
func ValidateGetAccountPortfolioResponseBody(body *GetAccountPortfolioResponseBody) (err error) {
	if body.Data != nil {
		if err2 := ValidateSingleAccountPortfolioResponseBody(body.Data); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateGetAccountPortfoliosResponseBody runs the validations defined on
// GetAccountPortfoliosResponseBody
func ValidateGetAccountPortfoliosResponseBody(body *GetAccountPortfoliosResponseBody) (err error) {
	for _, e := range body.Portfolios {
		if e != nil {
			if err2 := ValidateSingleAccountPortfolioResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetAllGuildsNotFoundResponseBody runs the validations defined on
// GetAllGuilds_not_found_Response_Body
func ValidateGetAllGuildsNotFoundResponseBody(body *GetAllGuildsNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetAllGuildsInternalResponseBody runs the validations defined on
// GetAllGuilds_internal_Response_Body
func ValidateGetAllGuildsInternalResponseBody(body *GetAllGuildsInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetSingleGuildNotFoundResponseBody runs the validations defined on
// GetSingleGuild_not_found_Response_Body
func ValidateGetSingleGuildNotFoundResponseBody(body *GetSingleGuildNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetSingleGuildInternalResponseBody runs the validations defined on
// GetSingleGuild_internal_Response_Body
func ValidateGetSingleGuildInternalResponseBody(body *GetSingleGuildInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetGuildMembersNotFoundResponseBody runs the validations defined on
// GetGuildMembers_not_found_Response_Body
func ValidateGetGuildMembersNotFoundResponseBody(body *GetGuildMembersNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetGuildMembersInternalResponseBody runs the validations defined on
// GetGuildMembers_internal_Response_Body
func ValidateGetGuildMembersInternalResponseBody(body *GetGuildMembersInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetGuildMasterAddressNotFoundResponseBody runs the validations
// defined on GetGuildMasterAddress_not_found_Response_Body
func ValidateGetGuildMasterAddressNotFoundResponseBody(body *GetGuildMasterAddressNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetGuildMasterAddressInternalResponseBody runs the validations
// defined on GetGuildMasterAddress_internal_Response_Body
func ValidateGetGuildMasterAddressInternalResponseBody(body *GetGuildMasterAddressInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetGuildDefaultMemberNotFoundResponseBody runs the validations
// defined on GetGuildDefaultMember_not_found_Response_Body
func ValidateGetGuildDefaultMemberNotFoundResponseBody(body *GetGuildDefaultMemberNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetGuildDefaultMemberInternalResponseBody runs the validations
// defined on GetGuildDefaultMember_internal_Response_Body
func ValidateGetGuildDefaultMemberInternalResponseBody(body *GetGuildDefaultMemberInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateEnterGuildNotFoundResponseBody runs the validations defined on
// EnterGuild_not_found_Response_Body
func ValidateEnterGuildNotFoundResponseBody(body *EnterGuildNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateEnterGuildInternalResponseBody runs the validations defined on
// EnterGuild_internal_Response_Body
func ValidateEnterGuildInternalResponseBody(body *EnterGuildInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateLeaveGuildNotFoundResponseBody runs the validations defined on
// LeaveGuild_not_found_Response_Body
func ValidateLeaveGuildNotFoundResponseBody(body *LeaveGuildNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateLeaveGuildInternalResponseBody runs the validations defined on
// LeaveGuild_internal_Response_Body
func ValidateLeaveGuildInternalResponseBody(body *LeaveGuildInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetGuildMarketsNotFoundResponseBody runs the validations defined on
// GetGuildMarkets_not_found_Response_Body
func ValidateGetGuildMarketsNotFoundResponseBody(body *GetGuildMarketsNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetGuildMarketsInternalResponseBody runs the validations defined on
// GetGuildMarkets_internal_Response_Body
func ValidateGetGuildMarketsInternalResponseBody(body *GetGuildMarketsInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetGuildPortfoliosNotFoundResponseBody runs the validations defined
// on GetGuildPortfolios_not_found_Response_Body
func ValidateGetGuildPortfoliosNotFoundResponseBody(body *GetGuildPortfoliosNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetGuildPortfoliosInternalResponseBody runs the validations defined
// on GetGuildPortfolios_internal_Response_Body
func ValidateGetGuildPortfoliosInternalResponseBody(body *GetGuildPortfoliosInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetAccountPortfolioNotFoundResponseBody runs the validations defined
// on GetAccountPortfolio_not_found_Response_Body
func ValidateGetAccountPortfolioNotFoundResponseBody(body *GetAccountPortfolioNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetAccountPortfolioInternalResponseBody runs the validations defined
// on GetAccountPortfolio_internal_Response_Body
func ValidateGetAccountPortfolioInternalResponseBody(body *GetAccountPortfolioInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetAccountPortfoliosNotFoundResponseBody runs the validations
// defined on GetAccountPortfolios_not_found_Response_Body
func ValidateGetAccountPortfoliosNotFoundResponseBody(body *GetAccountPortfoliosNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetAccountPortfoliosInternalResponseBody runs the validations
// defined on GetAccountPortfolios_internal_Response_Body
func ValidateGetAccountPortfoliosInternalResponseBody(body *GetAccountPortfoliosInternalResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGuildResponseBody runs the validations defined on GuildResponseBody
func ValidateGuildResponseBody(body *GuildResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.MasterAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("master_address", "body"))
	}
	if body.Requirements == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("requirements", "body"))
	}
	if body.StakingRequirement == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("staking_requirement", "body"))
	}
	if body.Capacity == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("capacity", "body"))
	}
	if body.MemberCount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("member_count", "body"))
	}
	for _, e := range body.Requirements {
		if e != nil {
			if err2 := ValidateRequirementResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	if body.CurrentPortfolio != nil {
		if err2 := ValidateSingleGuildPortfolioResponseBody(body.CurrentPortfolio); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateRequirementResponseBody runs the validations defined on
// RequirementResponseBody
func ValidateRequirementResponseBody(body *RequirementResponseBody) (err error) {
	if body.Denom == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("denom", "body"))
	}
	if body.MinAmountUsd == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("min_amount_usd", "body"))
	}
	return
}

// ValidateSingleGuildPortfolioResponseBody runs the validations defined on
// SingleGuildPortfolioResponseBody
func ValidateSingleGuildPortfolioResponseBody(body *SingleGuildPortfolioResponseBody) (err error) {
	if body.Balances == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("balances", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	for _, e := range body.Balances {
		if e != nil {
			if err2 := ValidateBalanceResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateBalanceResponseBody runs the validations defined on
// BalanceResponseBody
func ValidateBalanceResponseBody(body *BalanceResponseBody) (err error) {
	if body.Denom == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("denom", "body"))
	}
	if body.TotalBalance == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total_balance", "body"))
	}
	if body.AvailableBalance == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("available_balance", "body"))
	}
	if body.UnrealizedPnl == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("unrealized_pnl", "body"))
	}
	if body.MarginHold == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("margin_hold", "body"))
	}
	if body.PriceUsd == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price_usd", "body"))
	}
	return
}

// ValidateGuildMemberResponseBody runs the validations defined on
// GuildMemberResponseBody
func ValidateGuildMemberResponseBody(body *GuildMemberResponseBody) (err error) {
	if body.InjectiveAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("injective_address", "body"))
	}
	if body.IsDefaultGuildMember == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_default_guild_member", "body"))
	}
	if body.Since == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("since", "body"))
	}
	return
}

// ValidateMarketResponseBody runs the validations defined on MarketResponseBody
func ValidateMarketResponseBody(body *MarketResponseBody) (err error) {
	if body.MarketID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("market_id", "body"))
	}
	if body.IsPerpetual == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_perpetual", "body"))
	}
	return
}

// ValidateSingleAccountPortfolioResponseBody runs the validations defined on
// SingleAccountPortfolioResponseBody
func ValidateSingleAccountPortfolioResponseBody(body *SingleAccountPortfolioResponseBody) (err error) {
	if body.InjectiveAddress == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("injective_address", "body"))
	}
	if body.Balances == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("balances", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	for _, e := range body.Balances {
		if e != nil {
			if err2 := ValidateBalanceResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}
