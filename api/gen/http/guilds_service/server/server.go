// Code generated by goa v3.6.2, DO NOT EDIT.
//
// GuildsService HTTP server
//
// Command:
// $ goa gen github.com/InjectiveLabs/injective-guilds-service/api/design -o ../

package server

import (
	"context"
	"net/http"

	guildsservice "github.com/InjectiveLabs/injective-guilds-service/api/gen/guilds_service"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the GuildsService service endpoint HTTP handlers.
type Server struct {
	Mounts                      []*MountPoint
	GetAllGuilds                http.Handler
	GetSingleGuild              http.Handler
	GetGuildMembers             http.Handler
	GetGuildMasterAddress       http.Handler
	GetGuildDefaultMember       http.Handler
	EnterGuild                  http.Handler
	LeaveGuild                  http.Handler
	GetGuildMarkets             http.Handler
	GetGuildPortfolios          http.Handler
	GetAccountInfo              http.Handler
	GetAccountPortfolio         http.Handler
	GetAccountPortfolios        http.Handler
	GetAccountMonthlyPortfolios http.Handler
	CORS                        http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the GuildsService service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *guildsservice.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"GetAllGuilds", "GET", "/guilds"},
			{"GetSingleGuild", "GET", "/guilds/{guildID}"},
			{"GetGuildMembers", "GET", "/guilds/{guildID}/members"},
			{"GetGuildMasterAddress", "GET", "/guilds/{guildID}/guild-master"},
			{"GetGuildDefaultMember", "GET", "/guilds/{guildID}/default-member"},
			{"EnterGuild", "POST", "/guilds/{guildID}/member"},
			{"LeaveGuild", "DELETE", "/guilds/{guildID}/member/{injective_address}"},
			{"GetGuildMarkets", "GET", "/guilds/{guildID}/markets"},
			{"GetGuildPortfolios", "GET", "/guilds/{guildID}/portfolios"},
			{"GetAccountInfo", "GET", "/members/{injective_address}"},
			{"GetAccountPortfolio", "GET", "/members/{injective_address}/portfolio"},
			{"GetAccountPortfolios", "GET", "/members/{injective_address}/portfolios"},
			{"GetAccountMonthlyPortfolios", "GET", "/members/{injective_address}/monthly-portfolios"},
			{"CORS", "OPTIONS", "/guilds"},
			{"CORS", "OPTIONS", "/guilds/{guildID}"},
			{"CORS", "OPTIONS", "/guilds/{guildID}/members"},
			{"CORS", "OPTIONS", "/guilds/{guildID}/guild-master"},
			{"CORS", "OPTIONS", "/guilds/{guildID}/default-member"},
			{"CORS", "OPTIONS", "/guilds/{guildID}/member"},
			{"CORS", "OPTIONS", "/guilds/{guildID}/member/{injective_address}"},
			{"CORS", "OPTIONS", "/guilds/{guildID}/markets"},
			{"CORS", "OPTIONS", "/guilds/{guildID}/portfolios"},
			{"CORS", "OPTIONS", "/members/{injective_address}"},
			{"CORS", "OPTIONS", "/members/{injective_address}/portfolio"},
			{"CORS", "OPTIONS", "/members/{injective_address}/portfolios"},
			{"CORS", "OPTIONS", "/members/{injective_address}/monthly-portfolios"},
		},
		GetAllGuilds:                NewGetAllGuildsHandler(e.GetAllGuilds, mux, decoder, encoder, errhandler, formatter),
		GetSingleGuild:              NewGetSingleGuildHandler(e.GetSingleGuild, mux, decoder, encoder, errhandler, formatter),
		GetGuildMembers:             NewGetGuildMembersHandler(e.GetGuildMembers, mux, decoder, encoder, errhandler, formatter),
		GetGuildMasterAddress:       NewGetGuildMasterAddressHandler(e.GetGuildMasterAddress, mux, decoder, encoder, errhandler, formatter),
		GetGuildDefaultMember:       NewGetGuildDefaultMemberHandler(e.GetGuildDefaultMember, mux, decoder, encoder, errhandler, formatter),
		EnterGuild:                  NewEnterGuildHandler(e.EnterGuild, mux, decoder, encoder, errhandler, formatter),
		LeaveGuild:                  NewLeaveGuildHandler(e.LeaveGuild, mux, decoder, encoder, errhandler, formatter),
		GetGuildMarkets:             NewGetGuildMarketsHandler(e.GetGuildMarkets, mux, decoder, encoder, errhandler, formatter),
		GetGuildPortfolios:          NewGetGuildPortfoliosHandler(e.GetGuildPortfolios, mux, decoder, encoder, errhandler, formatter),
		GetAccountInfo:              NewGetAccountInfoHandler(e.GetAccountInfo, mux, decoder, encoder, errhandler, formatter),
		GetAccountPortfolio:         NewGetAccountPortfolioHandler(e.GetAccountPortfolio, mux, decoder, encoder, errhandler, formatter),
		GetAccountPortfolios:        NewGetAccountPortfoliosHandler(e.GetAccountPortfolios, mux, decoder, encoder, errhandler, formatter),
		GetAccountMonthlyPortfolios: NewGetAccountMonthlyPortfoliosHandler(e.GetAccountMonthlyPortfolios, mux, decoder, encoder, errhandler, formatter),
		CORS:                        NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "GuildsService" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.GetAllGuilds = m(s.GetAllGuilds)
	s.GetSingleGuild = m(s.GetSingleGuild)
	s.GetGuildMembers = m(s.GetGuildMembers)
	s.GetGuildMasterAddress = m(s.GetGuildMasterAddress)
	s.GetGuildDefaultMember = m(s.GetGuildDefaultMember)
	s.EnterGuild = m(s.EnterGuild)
	s.LeaveGuild = m(s.LeaveGuild)
	s.GetGuildMarkets = m(s.GetGuildMarkets)
	s.GetGuildPortfolios = m(s.GetGuildPortfolios)
	s.GetAccountInfo = m(s.GetAccountInfo)
	s.GetAccountPortfolio = m(s.GetAccountPortfolio)
	s.GetAccountPortfolios = m(s.GetAccountPortfolios)
	s.GetAccountMonthlyPortfolios = m(s.GetAccountMonthlyPortfolios)
	s.CORS = m(s.CORS)
}

// Mount configures the mux to serve the GuildsService endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountGetAllGuildsHandler(mux, h.GetAllGuilds)
	MountGetSingleGuildHandler(mux, h.GetSingleGuild)
	MountGetGuildMembersHandler(mux, h.GetGuildMembers)
	MountGetGuildMasterAddressHandler(mux, h.GetGuildMasterAddress)
	MountGetGuildDefaultMemberHandler(mux, h.GetGuildDefaultMember)
	MountEnterGuildHandler(mux, h.EnterGuild)
	MountLeaveGuildHandler(mux, h.LeaveGuild)
	MountGetGuildMarketsHandler(mux, h.GetGuildMarkets)
	MountGetGuildPortfoliosHandler(mux, h.GetGuildPortfolios)
	MountGetAccountInfoHandler(mux, h.GetAccountInfo)
	MountGetAccountPortfolioHandler(mux, h.GetAccountPortfolio)
	MountGetAccountPortfoliosHandler(mux, h.GetAccountPortfolios)
	MountGetAccountMonthlyPortfoliosHandler(mux, h.GetAccountMonthlyPortfolios)
	MountCORSHandler(mux, h.CORS)
}

// Mount configures the mux to serve the GuildsService endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountGetAllGuildsHandler configures the mux to serve the "GuildsService"
// service "GetAllGuilds" endpoint.
func MountGetAllGuildsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleGuildsServiceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/guilds", f)
}

// NewGetAllGuildsHandler creates a HTTP handler which loads the HTTP request
// and calls the "GuildsService" service "GetAllGuilds" endpoint.
func NewGetAllGuildsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeGetAllGuildsResponse(encoder)
		encodeError    = EncodeGetAllGuildsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetAllGuilds")
		ctx = context.WithValue(ctx, goa.ServiceKey, "GuildsService")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetSingleGuildHandler configures the mux to serve the "GuildsService"
// service "GetSingleGuild" endpoint.
func MountGetSingleGuildHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleGuildsServiceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/guilds/{guildID}", f)
}

// NewGetSingleGuildHandler creates a HTTP handler which loads the HTTP request
// and calls the "GuildsService" service "GetSingleGuild" endpoint.
func NewGetSingleGuildHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetSingleGuildRequest(mux, decoder)
		encodeResponse = EncodeGetSingleGuildResponse(encoder)
		encodeError    = EncodeGetSingleGuildError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetSingleGuild")
		ctx = context.WithValue(ctx, goa.ServiceKey, "GuildsService")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetGuildMembersHandler configures the mux to serve the "GuildsService"
// service "GetGuildMembers" endpoint.
func MountGetGuildMembersHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleGuildsServiceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/guilds/{guildID}/members", f)
}

// NewGetGuildMembersHandler creates a HTTP handler which loads the HTTP
// request and calls the "GuildsService" service "GetGuildMembers" endpoint.
func NewGetGuildMembersHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetGuildMembersRequest(mux, decoder)
		encodeResponse = EncodeGetGuildMembersResponse(encoder)
		encodeError    = EncodeGetGuildMembersError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetGuildMembers")
		ctx = context.WithValue(ctx, goa.ServiceKey, "GuildsService")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetGuildMasterAddressHandler configures the mux to serve the
// "GuildsService" service "GetGuildMasterAddress" endpoint.
func MountGetGuildMasterAddressHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleGuildsServiceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/guilds/{guildID}/guild-master", f)
}

// NewGetGuildMasterAddressHandler creates a HTTP handler which loads the HTTP
// request and calls the "GuildsService" service "GetGuildMasterAddress"
// endpoint.
func NewGetGuildMasterAddressHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetGuildMasterAddressRequest(mux, decoder)
		encodeResponse = EncodeGetGuildMasterAddressResponse(encoder)
		encodeError    = EncodeGetGuildMasterAddressError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetGuildMasterAddress")
		ctx = context.WithValue(ctx, goa.ServiceKey, "GuildsService")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetGuildDefaultMemberHandler configures the mux to serve the
// "GuildsService" service "GetGuildDefaultMember" endpoint.
func MountGetGuildDefaultMemberHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleGuildsServiceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/guilds/{guildID}/default-member", f)
}

// NewGetGuildDefaultMemberHandler creates a HTTP handler which loads the HTTP
// request and calls the "GuildsService" service "GetGuildDefaultMember"
// endpoint.
func NewGetGuildDefaultMemberHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetGuildDefaultMemberRequest(mux, decoder)
		encodeResponse = EncodeGetGuildDefaultMemberResponse(encoder)
		encodeError    = EncodeGetGuildDefaultMemberError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetGuildDefaultMember")
		ctx = context.WithValue(ctx, goa.ServiceKey, "GuildsService")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountEnterGuildHandler configures the mux to serve the "GuildsService"
// service "EnterGuild" endpoint.
func MountEnterGuildHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleGuildsServiceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/guilds/{guildID}/member", f)
}

// NewEnterGuildHandler creates a HTTP handler which loads the HTTP request and
// calls the "GuildsService" service "EnterGuild" endpoint.
func NewEnterGuildHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeEnterGuildRequest(mux, decoder)
		encodeResponse = EncodeEnterGuildResponse(encoder)
		encodeError    = EncodeEnterGuildError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "EnterGuild")
		ctx = context.WithValue(ctx, goa.ServiceKey, "GuildsService")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountLeaveGuildHandler configures the mux to serve the "GuildsService"
// service "LeaveGuild" endpoint.
func MountLeaveGuildHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleGuildsServiceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/guilds/{guildID}/member/{injective_address}", f)
}

// NewLeaveGuildHandler creates a HTTP handler which loads the HTTP request and
// calls the "GuildsService" service "LeaveGuild" endpoint.
func NewLeaveGuildHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeLeaveGuildRequest(mux, decoder)
		encodeResponse = EncodeLeaveGuildResponse(encoder)
		encodeError    = EncodeLeaveGuildError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "LeaveGuild")
		ctx = context.WithValue(ctx, goa.ServiceKey, "GuildsService")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetGuildMarketsHandler configures the mux to serve the "GuildsService"
// service "GetGuildMarkets" endpoint.
func MountGetGuildMarketsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleGuildsServiceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/guilds/{guildID}/markets", f)
}

// NewGetGuildMarketsHandler creates a HTTP handler which loads the HTTP
// request and calls the "GuildsService" service "GetGuildMarkets" endpoint.
func NewGetGuildMarketsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetGuildMarketsRequest(mux, decoder)
		encodeResponse = EncodeGetGuildMarketsResponse(encoder)
		encodeError    = EncodeGetGuildMarketsError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetGuildMarkets")
		ctx = context.WithValue(ctx, goa.ServiceKey, "GuildsService")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetGuildPortfoliosHandler configures the mux to serve the
// "GuildsService" service "GetGuildPortfolios" endpoint.
func MountGetGuildPortfoliosHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleGuildsServiceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/guilds/{guildID}/portfolios", f)
}

// NewGetGuildPortfoliosHandler creates a HTTP handler which loads the HTTP
// request and calls the "GuildsService" service "GetGuildPortfolios" endpoint.
func NewGetGuildPortfoliosHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetGuildPortfoliosRequest(mux, decoder)
		encodeResponse = EncodeGetGuildPortfoliosResponse(encoder)
		encodeError    = EncodeGetGuildPortfoliosError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetGuildPortfolios")
		ctx = context.WithValue(ctx, goa.ServiceKey, "GuildsService")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetAccountInfoHandler configures the mux to serve the "GuildsService"
// service "GetAccountInfo" endpoint.
func MountGetAccountInfoHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleGuildsServiceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/members/{injective_address}", f)
}

// NewGetAccountInfoHandler creates a HTTP handler which loads the HTTP request
// and calls the "GuildsService" service "GetAccountInfo" endpoint.
func NewGetAccountInfoHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetAccountInfoRequest(mux, decoder)
		encodeResponse = EncodeGetAccountInfoResponse(encoder)
		encodeError    = EncodeGetAccountInfoError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetAccountInfo")
		ctx = context.WithValue(ctx, goa.ServiceKey, "GuildsService")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetAccountPortfolioHandler configures the mux to serve the
// "GuildsService" service "GetAccountPortfolio" endpoint.
func MountGetAccountPortfolioHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleGuildsServiceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/members/{injective_address}/portfolio", f)
}

// NewGetAccountPortfolioHandler creates a HTTP handler which loads the HTTP
// request and calls the "GuildsService" service "GetAccountPortfolio" endpoint.
func NewGetAccountPortfolioHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetAccountPortfolioRequest(mux, decoder)
		encodeResponse = EncodeGetAccountPortfolioResponse(encoder)
		encodeError    = EncodeGetAccountPortfolioError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetAccountPortfolio")
		ctx = context.WithValue(ctx, goa.ServiceKey, "GuildsService")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetAccountPortfoliosHandler configures the mux to serve the
// "GuildsService" service "GetAccountPortfolios" endpoint.
func MountGetAccountPortfoliosHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleGuildsServiceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/members/{injective_address}/portfolios", f)
}

// NewGetAccountPortfoliosHandler creates a HTTP handler which loads the HTTP
// request and calls the "GuildsService" service "GetAccountPortfolios"
// endpoint.
func NewGetAccountPortfoliosHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetAccountPortfoliosRequest(mux, decoder)
		encodeResponse = EncodeGetAccountPortfoliosResponse(encoder)
		encodeError    = EncodeGetAccountPortfoliosError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetAccountPortfolios")
		ctx = context.WithValue(ctx, goa.ServiceKey, "GuildsService")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetAccountMonthlyPortfoliosHandler configures the mux to serve the
// "GuildsService" service "GetAccountMonthlyPortfolios" endpoint.
func MountGetAccountMonthlyPortfoliosHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandleGuildsServiceOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/members/{injective_address}/monthly-portfolios", f)
}

// NewGetAccountMonthlyPortfoliosHandler creates a HTTP handler which loads the
// HTTP request and calls the "GuildsService" service
// "GetAccountMonthlyPortfolios" endpoint.
func NewGetAccountMonthlyPortfoliosHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetAccountMonthlyPortfoliosRequest(mux, decoder)
		encodeResponse = EncodeGetAccountMonthlyPortfoliosResponse(encoder)
		encodeError    = EncodeGetAccountMonthlyPortfoliosError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetAccountMonthlyPortfolios")
		ctx = context.WithValue(ctx, goa.ServiceKey, "GuildsService")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service GuildsService.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandleGuildsServiceOrigin(h)
	mux.Handle("OPTIONS", "/guilds", h.ServeHTTP)
	mux.Handle("OPTIONS", "/guilds/{guildID}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/guilds/{guildID}/members", h.ServeHTTP)
	mux.Handle("OPTIONS", "/guilds/{guildID}/guild-master", h.ServeHTTP)
	mux.Handle("OPTIONS", "/guilds/{guildID}/default-member", h.ServeHTTP)
	mux.Handle("OPTIONS", "/guilds/{guildID}/member", h.ServeHTTP)
	mux.Handle("OPTIONS", "/guilds/{guildID}/member/{injective_address}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/guilds/{guildID}/markets", h.ServeHTTP)
	mux.Handle("OPTIONS", "/guilds/{guildID}/portfolios", h.ServeHTTP)
	mux.Handle("OPTIONS", "/members/{injective_address}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/members/{injective_address}/portfolio", h.ServeHTTP)
	mux.Handle("OPTIONS", "/members/{injective_address}/portfolios", h.ServeHTTP)
	mux.Handle("OPTIONS", "/members/{injective_address}/monthly-portfolios", h.ServeHTTP)
}

// NewCORSHandler creates a HTTP handler which returns a simple 200 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
}

// HandleGuildsServiceOrigin applies the CORS response headers corresponding to
// the origin for the service GuildsService.
func HandleGuildsServiceOrigin(h http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, "*") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, POST, DELETE")
				w.Header().Set("Access-Control-Allow-Headers", "Content-Type")
			}
			h.ServeHTTP(w, r)
			return
		}
		h.ServeHTTP(w, r)
		return
	})
}
