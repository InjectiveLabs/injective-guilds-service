// Code generated by MockGen. DO NOT EDIT.
// Source: internal/exchange/types.go

// Package exchange is a generated GoMock package.
package exchange

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockDataProvider is a mock of DataProvider interface.
type MockDataProvider struct {
	ctrl     *gomock.Controller
	recorder *MockDataProviderMockRecorder
}

// MockDataProviderMockRecorder is the mock recorder for MockDataProvider.
type MockDataProviderMockRecorder struct {
	mock *MockDataProvider
}

// NewMockDataProvider creates a new mock instance.
func NewMockDataProvider(ctrl *gomock.Controller) *MockDataProvider {
	mock := &MockDataProvider{ctrl: ctrl}
	mock.recorder = &MockDataProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataProvider) EXPECT() *MockDataProviderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDataProvider) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDataProviderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDataProvider)(nil).Close))
}

// GetBankBalance mocks base method.
func (m *MockDataProvider) GetBankBalance(ctx context.Context, address string) (*BankAccountBalances, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBankBalance", ctx, address)
	ret0, _ := ret[0].(*BankAccountBalances)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBankBalance indicates an expected call of GetBankBalance.
func (mr *MockDataProviderMockRecorder) GetBankBalance(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBankBalance", reflect.TypeOf((*MockDataProvider)(nil).GetBankBalance), ctx, address)
}

// GetDerivativeOrders mocks base method.
func (m *MockDataProvider) GetDerivativeOrders(ctx context.Context, marketIDs []string, subaccount string) ([]*DerivativeOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDerivativeOrders", ctx, marketIDs, subaccount)
	ret0, _ := ret[0].([]*DerivativeOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDerivativeOrders indicates an expected call of GetDerivativeOrders.
func (mr *MockDataProviderMockRecorder) GetDerivativeOrders(ctx, marketIDs, subaccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDerivativeOrders", reflect.TypeOf((*MockDataProvider)(nil).GetDerivativeOrders), ctx, marketIDs, subaccount)
}

// GetExchangeConn mocks base method.
func (m *MockDataProvider) GetExchangeConn() *grpc.ClientConn {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeConn")
	ret0, _ := ret[0].(*grpc.ClientConn)
	return ret0
}

// GetExchangeConn indicates an expected call of GetExchangeConn.
func (mr *MockDataProviderMockRecorder) GetExchangeConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeConn", reflect.TypeOf((*MockDataProvider)(nil).GetExchangeConn))
}

// GetGrants mocks base method.
func (m *MockDataProvider) GetGrants(ctx context.Context, granter, grantee string) (*Grants, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGrants", ctx, granter, grantee)
	ret0, _ := ret[0].(*Grants)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGrants indicates an expected call of GetGrants.
func (mr *MockDataProviderMockRecorder) GetGrants(ctx, granter, grantee interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGrants", reflect.TypeOf((*MockDataProvider)(nil).GetGrants), ctx, granter, grantee)
}

// GetPositions mocks base method.
func (m *MockDataProvider) GetPositions(ctx context.Context, subaccount string) ([]*DerivativePosition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPositions", ctx, subaccount)
	ret0, _ := ret[0].([]*DerivativePosition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPositions indicates an expected call of GetPositions.
func (mr *MockDataProviderMockRecorder) GetPositions(ctx, subaccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPositions", reflect.TypeOf((*MockDataProvider)(nil).GetPositions), ctx, subaccount)
}

// GetPriceUSD mocks base method.
func (m *MockDataProvider) GetPriceUSD(ctx context.Context, coinIDs []string) ([]*CoinPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPriceUSD", ctx, coinIDs)
	ret0, _ := ret[0].([]*CoinPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPriceUSD indicates an expected call of GetPriceUSD.
func (mr *MockDataProviderMockRecorder) GetPriceUSD(ctx, coinIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPriceUSD", reflect.TypeOf((*MockDataProvider)(nil).GetPriceUSD), ctx, coinIDs)
}

// GetSpotOrders mocks base method.
func (m *MockDataProvider) GetSpotOrders(ctx context.Context, marketIDs []string, subaccount string) ([]*SpotOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpotOrders", ctx, marketIDs, subaccount)
	ret0, _ := ret[0].([]*SpotOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpotOrders indicates an expected call of GetSpotOrders.
func (mr *MockDataProviderMockRecorder) GetSpotOrders(ctx, marketIDs, subaccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpotOrders", reflect.TypeOf((*MockDataProvider)(nil).GetSpotOrders), ctx, marketIDs, subaccount)
}

// GetSubaccountBalances mocks base method.
func (m *MockDataProvider) GetSubaccountBalances(ctx context.Context, subaccount string) ([]*Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubaccountBalances", ctx, subaccount)
	ret0, _ := ret[0].([]*Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubaccountBalances indicates an expected call of GetSubaccountBalances.
func (mr *MockDataProviderMockRecorder) GetSubaccountBalances(ctx, subaccount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubaccountBalances", reflect.TypeOf((*MockDataProvider)(nil).GetSubaccountBalances), ctx, subaccount)
}
